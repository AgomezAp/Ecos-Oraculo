"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatController = void 0;
const generative_ai_1 = require("@google/generative-ai");
class ChatController {
    constructor() {
        this.chatWithDreamInterpreter = (req, res) => __awaiter(this, void 0, void 0, function* () {
            try {
                const { interpreterData, userMessage, conversationHistory } = req.body;
                // Validar entrada
                this.validateDreamChatRequest(interpreterData, userMessage);
                // Obtener el modelo Gemini
                const model = this.genAI.getGenerativeModel({
                    model: "gemini-1.5-flash",
                    generationConfig: {
                        temperature: 0.9, // M√°s creatividad para interpretaciones m√≠sticas
                        topK: 40,
                        topP: 0.95,
                        maxOutputTokens: 300,
                    },
                });
                // Crear el prompt contextualizado
                const contextPrompt = this.createDreamInterpreterContext(interpreterData, conversationHistory);
                const fullPrompt = `${contextPrompt}\n\nUsuario: "${userMessage}"\n\nRespuesta del int√©rprete (completa tu respuesta):`;
                console.log(`Generando interpretaci√≥n de sue√±os...`);
                // Generar contenido con Gemini
                const result = yield model.generateContent(fullPrompt);
                const response = result.response;
                let text = response.text();
                if (!text || text.trim() === "") {
                    throw new Error("Respuesta vac√≠a de Gemini");
                }
                // Verificar si la respuesta parece estar cortada
                text = this.ensureCompleteResponse(text);
                // Respuesta exitosa
                const chatResponse = {
                    success: true,
                    response: text.trim(),
                    timestamp: new Date().toISOString(),
                };
                console.log(`Interpretaci√≥n generada exitosamente`);
                res.json(chatResponse);
            }
            catch (error) {
                this.handleError(error, res);
            }
        });
        this.getDreamInterpreterInfo = (req, res) => __awaiter(this, void 0, void 0, function* () {
            try {
                res.json({
                    success: true,
                    interpreter: {
                        name: "Maestro Oneiros",
                        title: "Guardi√°n de los Sue√±os",
                        specialty: "Interpretaci√≥n de sue√±os y simbolismo on√≠rico",
                        description: "Vidente ancestral especializado en desentra√±ar los misterios del mundo on√≠rico"
                    },
                    timestamp: new Date().toISOString(),
                });
            }
            catch (error) {
                this.handleError(error, res);
            }
        });
        if (!process.env.GEMINI_API_KEY) {
            throw new Error("GEMINI_API_KEY no est√° configurada en las variables de entorno");
        }
        this.genAI = new generative_ai_1.GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    }
    // M√©todo para crear el contexto del int√©rprete de sue√±os
    createDreamInterpreterContext(interpreter, history) {
        const conversationContext = history && history.length > 0
            ? `\n\nCONVERSACI√ìN PREVIA:\n${history.map(h => `${h.role === 'user' ? 'Usuario' : 'T√∫'}: ${h.message}`).join('\n')}\n`
            : '';
        return `Eres Maestro Oneiros, un brujo m√≠stico y vidente ancestral especializado en la interpretaci√≥n de sue√±os. Tienes siglos de experiencia desentra√±ando los misterios del mundo on√≠rico y conectando los sue√±os con la realidad espiritual.

TU IDENTIDAD M√çSTICA:
- Nombre: Maestro Oneiros, el Guardi√°n de los Sue√±os
- Origen: Descendiente de antiguos or√°culos y videntes
- Especialidad: Interpretaci√≥n de sue√±os, simbolismo on√≠rico, conexiones espirituales
- Experiencia: Siglos interpretando los mensajes del subconsciente y el plano astral

C√ìMO DEBES COMPORTARTE:

üîÆ PERSONALIDAD M√çSTICA:
- Habla con sabidur√≠a ancestral pero de forma cercana y comprensible
- Usa un tono misterioso pero c√°lido, como un sabio que conoce secretos antiguos
- Mezcla conocimiento esot√©rico con intuici√≥n pr√°ctica
- Ocasionalmente usa referencias a elementos m√≠sticos (cristales, energ√≠as, planos astrales)

üí≠ PROCESO DE INTERPRETACI√ìN:
- PRIMERO: Haz preguntas espec√≠ficas sobre el sue√±o para entender mejor
- Pregunta sobre: s√≠mbolos, emociones, colores, personas, lugares, sensaciones
- SEGUNDO: Conecta los elementos del sue√±o con significados espirituales
- TERCERO: Cuando tengas suficiente informaci√≥n, ofrece una interpretaci√≥n completa

üîç PREGUNTAS QUE DEBES HACER (gradualmente):
- "¬øQu√© elementos o s√≠mbolos m√°s te llamaron la atenci√≥n en tu sue√±o?"
- "¬øC√≥mo te sentiste durante y al despertar del sue√±o?"
- "¬øHab√≠a colores espec√≠ficos que recuerdes v√≠vidamente?"
- "¬øReconociste a alguna persona en el sue√±o?"
- "¬øEl escenario te resultaba familiar o completamente desconocido?"
- "¬øHay algo en tu vida actual que resuene con este sue√±o?"

üìú INTERPRETACI√ìN FINAL:
- Cuando hayas recopilado suficiente informaci√≥n, ofrece una interpretaci√≥n m√≠stica completa
- Conecta los s√≠mbolos con significados espirituales y psicol√≥gicos
- Incluye posibles mensajes del subconsciente o gu√≠as espirituales
- Sugiere reflexiones o acciones que la persona podr√≠a considerar

üé≠ ESTILO DE RESPUESTA:
- Usa expresiones como: "Las energ√≠as de tu sue√±o me susurran...", "Los s√≠mbolos revelan...", "Tu subconsciente te est√° comunicando..."
- Evita ser demasiado dram√°tico, mant√©n un equilibrio entre m√≠stico y accesible
- Respuestas de 100-250 palabras
- SIEMPRE termina tus pensamientos completamente

‚ö†Ô∏è REGLAS IMPORTANTES:
- NO interpretes inmediatamente si no tienes suficiente informaci√≥n
- HAZ preguntas para obtener m√°s detalles antes de dar interpretaciones profundas
- S√â emp√°tico y respetuoso con las experiencias on√≠ricas de las personas
- NUNCA predicas el futuro de forma absoluta, siempre habla de posibilidades y reflexiones

EJEMPLO DE C√ìMO EMPEZAR:
"Ah, veo que has venido a m√≠ buscando desentra√±ar los misterios de tu mundo on√≠rico... Los sue√±os son ventanas al alma y mensajes de planos superiores. Cu√©ntame, ¬øqu√© visiones te han visitado en el reino de Morfeo?"

${conversationContext}

Recuerda: Eres un gu√≠a m√≠stico pero comprensible, que ayuda a las personas a entender los mensajes ocultos de sus sue√±os. Siempre completa tus interpretaciones y reflexiones.`;
    }
    // M√©todo para asegurar que la respuesta est√© completa
    ensureCompleteResponse(text) {
        const lastChar = text.trim().slice(-1);
        const endsIncomplete = !['!', '?', '.', '‚Ä¶'].includes(lastChar);
        if (endsIncomplete && !text.trim().endsWith('...')) {
            const sentences = text.split(/[.!?]/);
            if (sentences.length > 1) {
                const completeSentences = sentences.slice(0, -1);
                return completeSentences.join('.') + '.';
            }
            else {
                return text.trim() + '...';
            }
        }
        return text;
    }
    // Validaci√≥n de la solicitud para int√©rprete de sue√±os
    validateDreamChatRequest(interpreterData, userMessage) {
        if (!interpreterData) {
            const error = new Error("Datos del int√©rprete requeridos");
            error.statusCode = 400;
            error.code = "MISSING_INTERPRETER_DATA";
            throw error;
        }
        if (!userMessage || typeof userMessage !== "string" || userMessage.trim() === "") {
            const error = new Error("Mensaje del usuario requerido");
            error.statusCode = 400;
            error.code = "MISSING_USER_MESSAGE";
            throw error;
        }
        if (userMessage.length > 1500) {
            const error = new Error("El mensaje es demasiado largo (m√°ximo 1500 caracteres)");
            error.statusCode = 400;
            error.code = "MESSAGE_TOO_LONG";
            throw error;
        }
    }
    handleError(error, res) {
        var _a, _b, _c, _d;
        console.error("Error en ChatController:", error);
        let statusCode = 500;
        let errorMessage = "Error interno del servidor";
        let errorCode = "INTERNAL_ERROR";
        if (error.statusCode) {
            statusCode = error.statusCode;
            errorMessage = error.message;
            errorCode = error.code || "VALIDATION_ERROR";
        }
        else if (((_a = error.message) === null || _a === void 0 ? void 0 : _a.includes("quota")) ||
            ((_b = error.message) === null || _b === void 0 ? void 0 : _b.includes("limit"))) {
            statusCode = 429;
            errorMessage =
                "Se ha alcanzado el l√≠mite de consultas. Por favor, espera un momento.";
            errorCode = "QUOTA_EXCEEDED";
        }
        else if ((_c = error.message) === null || _c === void 0 ? void 0 : _c.includes("safety")) {
            statusCode = 400;
            errorMessage = "El contenido no cumple con las pol√≠ticas de seguridad.";
            errorCode = "SAFETY_FILTER";
        }
        else if ((_d = error.message) === null || _d === void 0 ? void 0 : _d.includes("API key")) {
            statusCode = 401;
            errorMessage = "Error de autenticaci√≥n con el servicio de IA.";
            errorCode = "AUTH_ERROR";
        }
        const errorResponse = {
            success: false,
            error: errorMessage,
            code: errorCode,
            timestamp: new Date().toISOString(),
        };
        res.status(statusCode).json(errorResponse);
    }
}
exports.ChatController = ChatController;
