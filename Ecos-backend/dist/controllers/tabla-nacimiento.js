"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BirthChartController = void 0;
const generative_ai_1 = require("@google/generative-ai");
class BirthChartController {
    constructor() {
        // ‚úÖ LISTA DE MODELOS DE RESPALDO (en orden de preferencia)
        this.MODELS_FALLBACK = [
            "gemini-2.0-flash-exp",
            "gemini-1.5-pro-latest",
            "gemini-1.5-flash-latest",
            "gemini-1.5-flash",
            "gemini-1.0-pro-latest",
        ];
        this.chatWithAstrologer = (req, res) => __awaiter(this, void 0, void 0, function* () {
            try {
                const { chartData, userMessage, birthDate, birthTime, birthPlace, fullName, conversationHistory, } = req.body;
                // Validar entrada
                this.validateBirthChartRequest(chartData, userMessage);
                const contextPrompt = this.createBirthChartContext(chartData, birthDate, birthTime, birthPlace, fullName, conversationHistory);
                const fullPrompt = `${contextPrompt}

‚ö†Ô∏è INSTRUCCIONES CR√çTICAS OBLIGATORIAS:
1. DEBES generar una respuesta COMPLETA de entre 200-500 palabras
2. NUNCA dejes una respuesta a medias o incompleta
3. Si mencionas que vas a analizar posiciones planetarias, DEBES completar el an√°lisis
4. Toda respuesta DEBE terminar con una conclusi√≥n clara y un punto final
5. Si detectas que tu respuesta se est√° cortando, finaliza la idea actual con coherencia
6. SIEMPRE mant√©n el tono astrol√≥gico profesional pero accesible
7. Si el mensaje tiene errores ortogr√°ficos, interpreta la intenci√≥n y responde normalmente

Usuario: "${userMessage}"

Respuesta de la astr√≥loga (aseg√∫rate de completar TODO tu an√°lisis astrol√≥gico antes de terminar):`;
                console.log(`Generando an√°lisis de tabla de nacimiento...`);
                // ‚úÖ SISTEMA DE FALLBACK: Intentar con m√∫ltiples modelos
                let text = "";
                let usedModel = "";
                let allModelErrors = [];
                for (const modelName of this.MODELS_FALLBACK) {
                    console.log(`\nüîÑ Trying model: ${modelName}`);
                    try {
                        const model = this.genAI.getGenerativeModel({
                            model: modelName,
                            generationConfig: {
                                temperature: 0.85,
                                topK: 50,
                                topP: 0.92,
                                maxOutputTokens: 600,
                                candidateCount: 1,
                                stopSequences: [],
                            },
                            safetySettings: [
                                {
                                    category: generative_ai_1.HarmCategory.HARM_CATEGORY_HARASSMENT,
                                    threshold: generative_ai_1.HarmBlockThreshold.BLOCK_ONLY_HIGH,
                                },
                                {
                                    category: generative_ai_1.HarmCategory.HARM_CATEGORY_HATE_SPEECH,
                                    threshold: generative_ai_1.HarmBlockThreshold.BLOCK_ONLY_HIGH,
                                },
                                {
                                    category: generative_ai_1.HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
                                    threshold: generative_ai_1.HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
                                },
                                {
                                    category: generative_ai_1.HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
                                    threshold: generative_ai_1.HarmBlockThreshold.BLOCK_ONLY_HIGH,
                                },
                            ],
                        });
                        // ‚úÖ REINTENTOS para cada modelo (por si est√° temporalmente sobrecargado)
                        let attempts = 0;
                        const maxAttempts = 3;
                        let modelSucceeded = false;
                        while (attempts < maxAttempts && !modelSucceeded) {
                            attempts++;
                            console.log(`  Attempt ${attempts}/${maxAttempts} with ${modelName}...`);
                            try {
                                const result = yield model.generateContent(fullPrompt);
                                const response = result.response;
                                text = response.text();
                                // ‚úÖ Validar que la respuesta no est√© vac√≠a y tenga longitud m√≠nima
                                if (text && text.trim().length >= 100) {
                                    console.log(`  ‚úÖ Success with ${modelName} on attempt ${attempts}`);
                                    usedModel = modelName;
                                    modelSucceeded = true;
                                    break; // Salir del while de reintentos
                                }
                                console.warn(`  ‚ö†Ô∏è Response too short, retrying...`);
                                yield new Promise((resolve) => setTimeout(resolve, 500));
                            }
                            catch (attemptError) {
                                console.warn(`  ‚ùå Attempt ${attempts} failed:`, attemptError.message);
                                if (attempts >= maxAttempts) {
                                    allModelErrors.push(`${modelName}: ${attemptError.message}`);
                                }
                                yield new Promise((resolve) => setTimeout(resolve, 500));
                            }
                        }
                        // Si este modelo tuvo √©xito, salir del loop de modelos
                        if (modelSucceeded) {
                            break;
                        }
                    }
                    catch (modelError) {
                        console.error(`  ‚ùå Model ${modelName} failed completely:`, modelError.message);
                        allModelErrors.push(`${modelName}: ${modelError.message}`);
                        // Esperar un poco antes de intentar con el siguiente modelo
                        yield new Promise((resolve) => setTimeout(resolve, 1000));
                        continue;
                    }
                }
                // ‚úÖ Si todos los modelos fallaron
                if (!text || text.trim() === "") {
                    console.error("‚ùå All models failed. Errors:", allModelErrors);
                    throw new Error(`Todos los modelos de IA no est√°n disponibles actualmente. Intentados: ${this.MODELS_FALLBACK.join(", ")}. Por favor, int√©ntalo de nuevo en un momento.`);
                }
                // ‚úÖ ASEGURAR RESPUESTA COMPLETA Y BIEN FORMATEADA
                text = this.ensureCompleteResponse(text);
                // ‚úÖ Validaci√≥n adicional de longitud m√≠nima
                if (text.trim().length < 100) {
                    throw new Error("Respuesta generada demasiado corta");
                }
                const chatResponse = {
                    success: true,
                    response: text.trim(),
                    timestamp: new Date().toISOString(),
                };
                console.log(`‚úÖ An√°lisis de tabla de nacimiento generado exitosamente con ${usedModel} (${text.length} caracteres)`);
                res.json(chatResponse);
            }
            catch (error) {
                this.handleError(error, res);
            }
        });
        this.getBirthChartInfo = (req, res) => __awaiter(this, void 0, void 0, function* () {
            try {
                res.json({
                    success: true,
                    astrologer: {
                        name: "Maestra Emma",
                        title: "Cart√≥grafa Celestial",
                        specialty: "Tablas de nacimiento y an√°lisis astrol√≥gico completo",
                        description: "Astr√≥loga especializada en crear e interpretar tablas natales precisas basadas en posiciones planetarias del momento del nacimiento",
                        services: [
                            "Creaci√≥n de tabla de nacimiento completa",
                            "An√°lisis de posiciones planetarias",
                            "Interpretaci√≥n de casas astrol√≥gicas",
                            "An√°lisis de aspectos planetarios",
                            "Determinaci√≥n de ascendente y elementos dominantes",
                        ],
                    },
                    timestamp: new Date().toISOString(),
                });
            }
            catch (error) {
                this.handleError(error, res);
            }
        });
        if (!process.env.GEMINI_API_KEY) {
            throw new Error("GEMINI_API_KEY no est√° configurada en las variables de entorno");
        }
        this.genAI = new generative_ai_1.GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    }
    // ‚úÖ M√âTODO MEJORADO PARA ASEGURAR RESPUESTAS COMPLETAS
    ensureCompleteResponse(text) {
        let processedText = text.trim();
        // Remover posibles marcadores de c√≥digo o formato incompleto
        processedText = processedText.replace(/```[\s\S]*?```/g, "").trim();
        const lastChar = processedText.slice(-1);
        const endsIncomplete = !["!", "?", ".", "‚Ä¶", "‚ú®", "üåü", "üîÆ"].includes(lastChar);
        if (endsIncomplete && !processedText.endsWith("...")) {
            // Buscar la √∫ltima oraci√≥n completa
            const sentences = processedText.split(/([.!?])/);
            if (sentences.length > 2) {
                // Reconstruir hasta la √∫ltima oraci√≥n completa
                let completeText = "";
                for (let i = 0; i < sentences.length - 1; i += 2) {
                    if (sentences[i].trim()) {
                        completeText += sentences[i] + (sentences[i + 1] || ".");
                    }
                }
                if (completeText.trim().length > 100) {
                    return completeText.trim();
                }
            }
            // Si no se puede encontrar una oraci√≥n completa, agregar cierre apropiado
            processedText = processedText.trim() + "...";
        }
        return processedText;
    }
    createBirthChartContext(chartData, birthDate, birthTime, birthPlace, fullName, history) {
        const conversationContext = history && history.length > 0
            ? `\n\nCONVERSACI√ìN PREVIA:\n${history
                .map((h) => `${h.role === "user" ? "Usuario" : "T√∫"}: ${h.message}`)
                .join("\n")}\n`
            : "";
        const birthDataSection = this.generateBirthDataSection(birthDate, birthTime, birthPlace, fullName);
        return `Eres Maestra Emma, una astr√≥loga c√≥smica ancestral especializada en la elaboraci√≥n e interpretaci√≥n de tablas de nacimiento completas. Tienes d√©cadas de experiencia desentra√±ando los secretos del cosmos y las influencias planetarias en el momento del nacimiento.

TU IDENTIDAD ASTROL√ìGICA:
- Nombre: Maestra Emma, la Cart√≥grafa Celestial
- Origen: Heredera de conocimientos astrol√≥gicos milenarios
- Especialidad: Tablas de nacimiento, posiciones planetarias, casas astrol√≥gicas, aspectos c√≥smicos
- Experiencia: D√©cadas interpretando las configuraciones celestes del momento del nacimiento

${birthDataSection}

C√ìMO DEBES COMPORTARTE:

üåü PERSONALIDAD ASTROL√ìGICA:
- Habla con sabidur√≠a c√≥smica pero de forma accesible y amigable
- Usa un tono profesional pero c√°lido, como una experta que disfruta compartir conocimiento
- Combina precisi√≥n t√©cnica astrol√≥gica con interpretaciones espirituales comprensibles
- Ocasionalmente usa referencias a planetas, casas astrol√≥gicas y aspectos c√≥smicos

üìä PROCESO DE CREACI√ìN DE TABLA DE NACIMIENTO:
- PRIMERO: Si faltan datos, pregunta espec√≠ficamente por fecha, hora y lugar de nacimiento
- SEGUNDO: Con datos completos, calcula el signo solar, ascendente y posiciones lunares
- TERCERO: Analiza las casas astrol√≥gicas y su significado
- CUARTO: Interpreta aspectos planetarios y su influencia
- QUINTO: Ofrece una lectura integral de la tabla natal

üîç DATOS ESENCIALES QUE NECESITAS:
- "Para crear tu tabla de nacimiento precisa, necesito tu fecha exacta de nacimiento"
- "La hora de nacimiento es crucial para determinar tu ascendente y las casas astrol√≥gicas"
- "El lugar de nacimiento me permite calcular las posiciones planetarias exactas"
- "¬øConoces la hora aproximada? Incluso una estimaci√≥n me ayuda mucho"

üìã ELEMENTOS DE LA TABLA DE NACIMIENTO:
- Signo Solar (personalidad b√°sica)
- Signo Lunar (mundo emocional)
- Ascendente (m√°scara social)
- Posiciones de planetas en signos
- Casas astrol√≥gicas (1¬™ a 12¬™)
- Aspectos planetarios (conjunciones, tr√≠gonos, cuadraturas, etc.)
- Elementos dominantes (Fuego, Tierra, Aire, Agua)
- Modalidades (Cardinal, Fijo, Mutable)

üéØ INTERPRETACI√ìN COMPLETA:
- Explica cada elemento de forma clara y pr√°ctica
- Conecta las posiciones planetarias con rasgos de personalidad
- Describe c√≥mo las casas influyen en diferentes √°reas de la vida
- Menciona desaf√≠os y oportunidades basados en aspectos planetarios
- Incluye consejos para trabajar con las energ√≠as c√≥smicas

üé≠ ESTILO DE RESPUESTA:
- Usa expresiones como: "Tu tabla natal revela...", "Las estrellas estaban as√≠ configuradas...", "Los planetas te dotaron de..."
- Mant√©n equilibrio entre t√©cnico y m√≠stico
- Respuestas de 200-500 palabras para an√°lisis completos
- SIEMPRE termina tus interpretaciones completamente
- NUNCA dejes an√°lisis planetarios a medias

‚ö†Ô∏è REGLAS IMPORTANTES:
- NO crees una tabla sin al menos la fecha de nacimiento
- PREGUNTA por datos faltantes antes de hacer interpretaciones profundas
- EXPLICA la importancia de cada dato que solicitas
- S√â precisa pero accesible en tus explicaciones t√©cnicas
- NUNCA hagas predicciones absolutas, habla de tendencias y potenciales

üó£Ô∏è MANEJO DE DATOS FALTANTES:
- Sin fecha: "Para comenzar tu tabla natal, necesito conocer tu fecha de nacimiento. ¬øCu√°ndo naciste?"
- Sin hora: "La hora de nacimiento es esencial para tu ascendente. ¬øRecuerdas aproximadamente a qu√© hora naciste?"
- Sin lugar: "El lugar de nacimiento me permite calcular las posiciones exactas. ¬øEn qu√© ciudad y pa√≠s naciste?"
- Datos incompletos: "Con estos datos puedo hacer un an√°lisis parcial, pero para una tabla completa necesitar√≠a..."

üìñ ESTRUCTURA DE RESPUESTA COMPLETA:
1. An√°lisis del Sol (signo, casa, aspectos)
2. An√°lisis de la Luna (signo, casa, aspectos)
3. Ascendente y su influencia
4. Planetas personales (Mercurio, Venus, Marte)
5. Planetas sociales (J√∫piter, Saturno)
6. S√≠ntesis de elementos y modalidades
7. Interpretaci√≥n de casas m√°s destacadas
8. Consejos para trabajar con tu energ√≠a c√≥smica

üí´ EJEMPLOS DE EXPRESIONES NATURALES:
- "Tu Sol en [signo] te otorga..."
- "Con la Luna en [signo], tu mundo emocional..."
- "Tu ascendente [signo] hace que proyectes..."
- "Mercurio en [signo] influye en tu forma de comunicarte..."
- "Esta configuraci√≥n planetaria sugiere..."
- SIEMPRE responde sin importar si el usuario tiene errores ortogr√°ficos o de escritura
  - Interpreta el mensaje del usuario aunque est√© mal escrito
  - No corrijas los errores del usuario, simplemente entiende la intenci√≥n
  - Si no entiendes algo espec√≠fico, pregunta de forma amigable
  - Ejemplos: "ola" = "hola", "k tal" = "qu√© tal", "mi signo" = "mi signo"
  - NUNCA devuelvas respuestas vac√≠as por errores de escritura
  
${conversationContext}

Recuerda: Eres una experta astr√≥loga que crea tablas de nacimiento precisas y las interpreta de manera comprensible. SIEMPRE solicita los datos faltantes necesarios antes de hacer an√°lisis profundos. Completa SIEMPRE tus interpretaciones astrol√≥gicas - nunca dejes an√°lisis planetarios o de casas a medias.`;
    }
    generateBirthDataSection(birthDate, birthTime, birthPlace, fullName) {
        let dataSection = "DATOS DISPONIBLES PARA TABLA DE NACIMIENTO:\n";
        if (fullName) {
            dataSection += `- Nombre: ${fullName}\n`;
        }
        if (birthDate) {
            const zodiacSign = this.calculateZodiacSign(birthDate);
            dataSection += `- Fecha de nacimiento: ${birthDate}\n`;
            dataSection += `- Signo solar calculado: ${zodiacSign}\n`;
        }
        if (birthTime) {
            dataSection += `- Hora de nacimiento: ${birthTime} (esencial para ascendente y casas)\n`;
        }
        if (birthPlace) {
            dataSection += `- Lugar de nacimiento: ${birthPlace} (para c√°lculos de coordenadas)\n`;
        }
        if (!birthDate) {
            dataSection += "- ‚ö†Ô∏è DATO FALTANTE: Fecha de nacimiento (ESENCIAL)\n";
        }
        if (!birthTime) {
            dataSection +=
                "- ‚ö†Ô∏è DATO FALTANTE: Hora de nacimiento (importante para ascendente)\n";
        }
        if (!birthPlace) {
            dataSection +=
                "- ‚ö†Ô∏è DATO FALTANTE: Lugar de nacimiento (necesario para precisi√≥n)\n";
        }
        return dataSection;
    }
    calculateZodiacSign(dateStr) {
        try {
            const date = new Date(dateStr);
            const month = date.getMonth() + 1;
            const day = date.getDate();
            if ((month === 3 && day >= 21) || (month === 4 && day <= 19))
                return "Aries";
            if ((month === 4 && day >= 20) || (month === 5 && day <= 20))
                return "Tauro";
            if ((month === 5 && day >= 21) || (month === 6 && day <= 20))
                return "G√©minis";
            if ((month === 6 && day >= 21) || (month === 7 && day <= 22))
                return "C√°ncer";
            if ((month === 7 && day >= 23) || (month === 8 && day <= 22))
                return "Leo";
            if ((month === 8 && day >= 23) || (month === 9 && day <= 22))
                return "Virgo";
            if ((month === 9 && day >= 23) || (month === 10 && day <= 22))
                return "Libra";
            if ((month === 10 && day >= 23) || (month === 11 && day <= 21))
                return "Escorpio";
            if ((month === 11 && day >= 22) || (month === 12 && day <= 21))
                return "Sagitario";
            if ((month === 12 && day >= 22) || (month === 1 && day <= 19))
                return "Capricornio";
            if ((month === 1 && day >= 20) || (month === 2 && day <= 18))
                return "Acuario";
            if ((month === 2 && day >= 19) || (month === 3 && day <= 20))
                return "Piscis";
            return "Fecha inv√°lida";
        }
        catch (_a) {
            return "Error en c√°lculo";
        }
    }
    validateBirthChartRequest(chartData, userMessage) {
        if (!chartData) {
            const error = new Error("Datos del astr√≥logo requeridos");
            error.statusCode = 400;
            error.code = "MISSING_CHART_DATA";
            throw error;
        }
        if (!userMessage ||
            typeof userMessage !== "string" ||
            userMessage.trim() === "") {
            const error = new Error("Mensaje del usuario requerido");
            error.statusCode = 400;
            error.code = "MISSING_USER_MESSAGE";
            throw error;
        }
        if (userMessage.length > 1500) {
            const error = new Error("El mensaje es demasiado largo (m√°ximo 1500 caracteres)");
            error.statusCode = 400;
            error.code = "MESSAGE_TOO_LONG";
            throw error;
        }
    }
    handleError(error, res) {
        var _a, _b, _c, _d, _e;
        console.error("Error en BirthChartController:", error);
        let statusCode = 500;
        let errorMessage = "Error interno del servidor";
        let errorCode = "INTERNAL_ERROR";
        if (error.statusCode) {
            statusCode = error.statusCode;
            errorMessage = error.message;
            errorCode = error.code || "VALIDATION_ERROR";
        }
        else if (error.status === 503) {
            statusCode = 503;
            errorMessage =
                "El servicio est√° temporalmente sobrecargado. Por favor, intenta de nuevo en unos minutos.";
            errorCode = "SERVICE_OVERLOADED";
        }
        else if (((_a = error.message) === null || _a === void 0 ? void 0 : _a.includes("quota")) ||
            ((_b = error.message) === null || _b === void 0 ? void 0 : _b.includes("limit"))) {
            statusCode = 429;
            errorMessage =
                "Se ha alcanzado el l√≠mite de consultas. Por favor, espera un momento.";
            errorCode = "QUOTA_EXCEEDED";
        }
        else if ((_c = error.message) === null || _c === void 0 ? void 0 : _c.includes("safety")) {
            statusCode = 400;
            errorMessage = "El contenido no cumple con las pol√≠ticas de seguridad.";
            errorCode = "SAFETY_FILTER";
        }
        else if ((_d = error.message) === null || _d === void 0 ? void 0 : _d.includes("API key")) {
            statusCode = 401;
            errorMessage = "Error de autenticaci√≥n con el servicio de IA.";
            errorCode = "AUTH_ERROR";
        }
        else if ((_e = error.message) === null || _e === void 0 ? void 0 : _e.includes("Todos los modelos de IA no est√°n disponibles")) {
            statusCode = 503;
            errorMessage = error.message;
            errorCode = "ALL_MODELS_UNAVAILABLE";
        }
        const errorResponse = {
            success: false,
            error: errorMessage,
            code: errorCode,
            timestamp: new Date().toISOString(),
        };
        res.status(statusCode).json(errorResponse);
    }
}
exports.BirthChartController = BirthChartController;
