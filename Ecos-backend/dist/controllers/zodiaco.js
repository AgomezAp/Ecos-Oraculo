"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZodiacController = void 0;
const generative_ai_1 = require("@google/generative-ai");
class ZodiacController {
    constructor() {
        this.chatWithAstrologer = (req, res) => __awaiter(this, void 0, void 0, function* () {
            try {
                const { zodiacData, userMessage, birthDate, zodiacSign, conversationHistory, } = req.body;
                // Validar entrada
                this.validateZodiacRequest(zodiacData, userMessage);
                // ‚úÖ CONFIGURACI√ìN OPTIMIZADA - IGUAL QUE TABLA-NACIMIENTO
                const model = this.genAI.getGenerativeModel({
                    model: "gemini-2.0-flash-exp",
                    generationConfig: {
                        temperature: 0.85,
                        topK: 50,
                        topP: 0.92,
                        maxOutputTokens: 600,
                        candidateCount: 1,
                        stopSequences: [],
                    },
                    safetySettings: [
                        {
                            category: generative_ai_1.HarmCategory.HARM_CATEGORY_HARASSMENT,
                            threshold: generative_ai_1.HarmBlockThreshold.BLOCK_ONLY_HIGH,
                        },
                        {
                            category: generative_ai_1.HarmCategory.HARM_CATEGORY_HATE_SPEECH,
                            threshold: generative_ai_1.HarmBlockThreshold.BLOCK_ONLY_HIGH,
                        },
                        {
                            category: generative_ai_1.HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
                            threshold: generative_ai_1.HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
                        },
                        {
                            category: generative_ai_1.HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
                            threshold: generative_ai_1.HarmBlockThreshold.BLOCK_ONLY_HIGH,
                        },
                    ],
                });
                const contextPrompt = this.createZodiacContext(zodiacData, birthDate, zodiacSign, conversationHistory);
                const fullPrompt = `${contextPrompt}

‚ö†Ô∏è INSTRUCCIONES CR√çTICAS OBLIGATORIAS:
1. DEBES generar una respuesta COMPLETA de entre 200-500 palabras
2. NUNCA dejes una respuesta a medias o incompleta
3. Si mencionas caracter√≠sticas del signo, DEBES completar la descripci√≥n
4. Toda respuesta DEBE terminar con una conclusi√≥n clara y un punto final
5. Si detectas que tu respuesta se est√° cortando, finaliza la idea actual con coherencia
6. SIEMPRE mant√©n el tono astrol√≥gico amigable y accesible
7. Si el mensaje tiene errores ortogr√°ficos, interpreta la intenci√≥n y responde normalmente

Usuario: "${userMessage}"

Respuesta de la astr√≥loga (aseg√∫rate de completar TODO tu an√°lisis zodiacal antes de terminar):`;
                console.log(`Generando lectura zodiacal...`);
                // ‚úÖ SISTEMA DE REINTENTOS ROBUSTO - ESTO EVITA "Respuesta vac√≠a de Gemini"
                let attempts = 0;
                const maxAttempts = 3;
                let text = "";
                while (attempts < maxAttempts) {
                    try {
                        const result = yield model.generateContent(fullPrompt);
                        const response = result.response;
                        text = response.text();
                        // ‚úÖ Validar que la respuesta no est√© vac√≠a y tenga longitud m√≠nima
                        if (text && text.trim().length >= 150) {
                            break; // ‚úÖ Respuesta v√°lida, salir del loop
                        }
                        attempts++;
                        console.warn(`‚ö†Ô∏è Intento ${attempts}: Respuesta vac√≠a o muy corta (${(text === null || text === void 0 ? void 0 : text.length) || 0} caracteres), reintentando...`);
                        if (attempts >= maxAttempts) {
                            throw new Error("No se pudo generar una respuesta v√°lida despu√©s de varios intentos");
                        }
                        // Esperar antes de reintentar
                        yield new Promise((resolve) => setTimeout(resolve, 500));
                    }
                    catch (innerError) {
                        attempts++;
                        // ‚úÖ Si es error 503 (overloaded) y no es el √∫ltimo intento
                        if (innerError.status === 503 && attempts < maxAttempts) {
                            const delay = Math.pow(2, attempts) * 1000; // Delay exponencial
                            console.warn(`‚ö†Ô∏è Error 503 - Servicio sobrecargado. Esperando ${delay}ms antes del intento ${attempts + 1}...`);
                            yield new Promise((resolve) => setTimeout(resolve, delay));
                            continue;
                        }
                        if (attempts >= maxAttempts) {
                            throw innerError;
                        }
                        console.warn(`‚ö†Ô∏è Intento ${attempts} fall√≥:`, innerError.message);
                        yield new Promise((resolve) => setTimeout(resolve, 500));
                    }
                }
                // ‚úÖ VALIDACI√ìN FINAL - SI DESPU√âS DE TODOS LOS INTENTOS SIGUE VAC√çO
                if (!text || text.trim() === "") {
                    throw new Error("Respuesta vac√≠a de Gemini despu√©s de m√∫ltiples intentos");
                }
                // ‚úÖ ASEGURAR RESPUESTA COMPLETA Y BIEN FORMATEADA
                text = this.ensureCompleteResponse(text);
                // ‚úÖ Validaci√≥n adicional de longitud m√≠nima
                if (text.trim().length < 100) {
                    throw new Error("Respuesta generada demasiado corta");
                }
                const chatResponse = {
                    success: true,
                    response: text.trim(),
                    timestamp: new Date().toISOString(),
                };
                console.log(`‚úÖ Lectura zodiacal generada exitosamente (${text.length} caracteres)`);
                res.json(chatResponse);
            }
            catch (error) {
                this.handleError(error, res);
            }
        });
        this.getZodiacInfo = (req, res) => __awaiter(this, void 0, void 0, function* () {
            try {
                res.json({
                    success: true,
                    astrologer: {
                        name: "Maestra Luna",
                        title: "Int√©rprete de las Estrellas",
                        specialty: "Signos zodiacales y an√°lisis astrol√≥gico",
                        description: "Experta en interpretar las caracter√≠sticas y energ√≠as de los doce signos del zodiaco",
                        services: [
                            "An√°lisis de caracter√≠sticas del signo zodiacal",
                            "Interpretaci√≥n de fortalezas y desaf√≠os",
                            "Compatibilidades astrol√≥gicas",
                            "Consejos basados en tu signo",
                            "Influencia de elementos y modalidades",
                        ],
                    },
                    timestamp: new Date().toISOString(),
                });
            }
            catch (error) {
                this.handleError(error, res);
            }
        });
        if (!process.env.GEMINI_API_KEY) {
            throw new Error("GEMINI_API_KEY no est√° configurada en las variables de entorno");
        }
        this.genAI = new generative_ai_1.GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    }
    // ‚úÖ M√âTODO MEJORADO PARA ASEGURAR RESPUESTAS COMPLETAS
    ensureCompleteResponse(text) {
        let processedText = text.trim();
        // Remover posibles marcadores de c√≥digo o formato incompleto
        processedText = processedText.replace(/```[\s\S]*?```/g, "").trim();
        const lastChar = processedText.slice(-1);
        const endsIncomplete = ![
            "!",
            "?",
            ".",
            "‚Ä¶",
            "‚ú®",
            "üåü",
            "‚ôà",
            "‚ôâ",
            "‚ôä",
            "‚ôã",
            "‚ôå",
            "‚ôç",
            "‚ôé",
            "‚ôè",
            "‚ôê",
            "‚ôë",
            "‚ôí",
            "‚ôì",
        ].includes(lastChar);
        if (endsIncomplete && !processedText.endsWith("...")) {
            // Buscar la √∫ltima oraci√≥n completa
            const sentences = processedText.split(/([.!?])/);
            if (sentences.length > 2) {
                // Reconstruir hasta la √∫ltima oraci√≥n completa
                let completeText = "";
                for (let i = 0; i < sentences.length - 1; i += 2) {
                    if (sentences[i].trim()) {
                        completeText += sentences[i] + (sentences[i + 1] || ".");
                    }
                }
                if (completeText.trim().length > 100) {
                    return completeText.trim();
                }
            }
            // Si no se puede encontrar una oraci√≥n completa, agregar cierre apropiado
            processedText = processedText.trim() + "...";
        }
        return processedText;
    }
    createZodiacContext(zodiacData, birthDate, zodiacSign, history) {
        const conversationContext = history && history.length > 0
            ? `\n\nCONVERSACI√ìN PREVIA:\n${history
                .map((h) => `${h.role === "user" ? "Usuario" : "T√∫"}: ${h.message}`)
                .join("\n")}\n`
            : "";
        let zodiacInfo = "";
        if (birthDate) {
            const calculatedSign = this.calculateZodiacSign(birthDate);
            zodiacInfo = `\nSigno zodiacal calculado: ${calculatedSign}`;
        }
        else if (zodiacSign) {
            zodiacInfo = `\nSigno zodiacal proporcionado: ${zodiacSign}`;
        }
        return `Eres Maestra Luna, una astr√≥loga experta en signos zodiacales con d√©cadas de experiencia interpretando las energ√≠as celestiales y su influencia en la personalidad humana.

TU IDENTIDAD:
- Nombre: Maestra Luna, la Int√©rprete de las Estrellas
- Especialidad: Signos zodiacales, caracter√≠sticas de personalidad, compatibilidades astrol√≥gicas
- Experiencia: D√©cadas estudiando e interpretando la influencia de los signos del zodiaco
${zodiacInfo}

C√ìMO DEBES COMPORTARTE:

üåü PERSONALIDAD ASTROL√ìGICA:
- Habla con conocimiento profundo pero de forma accesible y amigable
- Usa un tono c√°lido y entusiasta sobre los signos zodiacales
- Combina caracter√≠sticas tradicionales con interpretaciones modernas
- Menciona elementos (Fuego, Tierra, Aire, Agua) y modalidades (Cardinal, Fijo, Mutable)

‚ôà AN√ÅLISIS DE SIGNOS ZODIACALES:
- Describe rasgos de personalidad positivos y √°reas de crecimiento
- Explica fortalezas naturales y desaf√≠os del signo
- Menciona compatibilidades con otros signos
- Incluye consejos pr√°cticos basados en caracter√≠sticas del signo
- Habla sobre planeta regente y su influencia

üéØ ESTRUCTURA DE RESPUESTA:
- Caracter√≠sticas principales del signo
- Fortalezas y talentos naturales
- √Åreas de desarrollo y crecimiento
- Compatibilidades astrol√≥gicas
- Consejos personalizados

üé≠ ESTILO DE RESPUESTA:
- Usa expresiones como: "Los nativos de [signo]...", "Tu signo te otorga...", "Como [signo], posees..."
- Mant√©n equilibrio entre m√≠stico y pr√°ctico
- Respuestas de 200-500 palabras completas
- SIEMPRE termina tus interpretaciones completamente
- NUNCA dejes caracter√≠sticas del signo a medias

‚ö†Ô∏è REGLAS IMPORTANTES:
- SI NO tienes el signo zodiacal, pregunta por la fecha de nacimiento
- Explica por qu√© necesitas este dato
- NO hagas interpretaciones sin conocer el signo
- S√â positiva pero realista en tus descripciones
- NUNCA hagas predicciones absolutas

üó£Ô∏è MANEJO DE DATOS FALTANTES:
- Sin signo/fecha: "Para darte una lectura precisa, necesito saber tu signo zodiacal o fecha de nacimiento. ¬øCu√°ndo naciste?"
- Con signo: Procede con an√°lisis completo del signo
- Preguntas generales: Responde con informaci√≥n astrol√≥gica educativa

üí´ EJEMPLOS DE EXPRESIONES:
- "Los [signo] son conocidos por..."
- "Tu signo de [elemento] te otorga..."
- "Como [modalidad], tiendes a..."
- "Tu planeta regente [planeta] influye en..."
- SIEMPRE responde sin importar si el usuario tiene errores ortogr√°ficos o de escritura
  - Interpreta el mensaje del usuario aunque est√© mal escrito
  - No corrijas los errores del usuario, simplemente entiende la intenci√≥n
  - Si no entiendes algo espec√≠fico, pregunta de forma amigable
  - NUNCA devuelvas respuestas vac√≠as por errores de escritura

${conversationContext}

Recuerda: Eres una experta en signos zodiacales que interpreta las caracter√≠sticas astrol√≥gicas de forma comprensible y √∫til. SIEMPRE solicita el signo o fecha de nacimiento si no los tienes. Completa SIEMPRE tus interpretaciones - nunca dejes an√°lisis zodiacales a medias.`;
    }
    calculateZodiacSign(dateStr) {
        try {
            const date = new Date(dateStr);
            const month = date.getMonth() + 1;
            const day = date.getDate();
            if ((month === 3 && day >= 21) || (month === 4 && day <= 19))
                return "Aries ‚ôà";
            if ((month === 4 && day >= 20) || (month === 5 && day <= 20))
                return "Tauro ‚ôâ";
            if ((month === 5 && day >= 21) || (month === 6 && day <= 20))
                return "G√©minis ‚ôä";
            if ((month === 6 && day >= 21) || (month === 7 && day <= 22))
                return "C√°ncer ‚ôã";
            if ((month === 7 && day >= 23) || (month === 8 && day <= 22))
                return "Leo ‚ôå";
            if ((month === 8 && day >= 23) || (month === 9 && day <= 22))
                return "Virgo ‚ôç";
            if ((month === 9 && day >= 23) || (month === 10 && day <= 22))
                return "Libra ‚ôé";
            if ((month === 10 && day >= 23) || (month === 11 && day <= 21))
                return "Escorpio ‚ôè";
            if ((month === 11 && day >= 22) || (month === 12 && day <= 21))
                return "Sagitario ‚ôê";
            if ((month === 12 && day >= 22) || (month === 1 && day <= 19))
                return "Capricornio ‚ôë";
            if ((month === 1 && day >= 20) || (month === 2 && day <= 18))
                return "Acuario ‚ôí";
            if ((month === 2 && day >= 19) || (month === 3 && day <= 20))
                return "Piscis ‚ôì";
            return "Fecha inv√°lida";
        }
        catch (_a) {
            return "Error en c√°lculo";
        }
    }
    validateZodiacRequest(zodiacData, userMessage) {
        if (!zodiacData) {
            const error = new Error("Datos de la astr√≥loga requeridos");
            error.statusCode = 400;
            error.code = "MISSING_ZODIAC_DATA";
            throw error;
        }
        if (!userMessage ||
            typeof userMessage !== "string" ||
            userMessage.trim() === "") {
            const error = new Error("Mensaje del usuario requerido");
            error.statusCode = 400;
            error.code = "MISSING_USER_MESSAGE";
            throw error;
        }
        if (userMessage.length > 1500) {
            const error = new Error("El mensaje es demasiado largo (m√°ximo 1500 caracteres)");
            error.statusCode = 400;
            error.code = "MESSAGE_TOO_LONG";
            throw error;
        }
    }
    handleError(error, res) {
        var _a, _b, _c, _d, _e;
        console.error("‚ùå Error en ZodiacController:", error);
        let statusCode = 500;
        let errorMessage = "Error interno del servidor";
        let errorCode = "INTERNAL_ERROR";
        if (error.statusCode) {
            statusCode = error.statusCode;
            errorMessage = error.message;
            errorCode = error.code || "VALIDATION_ERROR";
        }
        else if (error.status === 503) {
            statusCode = 503;
            errorMessage =
                "El servicio est√° temporalmente sobrecargado. Por favor, intenta de nuevo en unos minutos.";
            errorCode = "SERVICE_OVERLOADED";
        }
        else if (((_a = error.message) === null || _a === void 0 ? void 0 : _a.includes("quota")) ||
            ((_b = error.message) === null || _b === void 0 ? void 0 : _b.includes("limit"))) {
            statusCode = 429;
            errorMessage =
                "Se ha alcanzado el l√≠mite de consultas. Por favor, espera un momento.";
            errorCode = "QUOTA_EXCEEDED";
        }
        else if ((_c = error.message) === null || _c === void 0 ? void 0 : _c.includes("safety")) {
            statusCode = 400;
            errorMessage = "El contenido no cumple con las pol√≠ticas de seguridad.";
            errorCode = "SAFETY_FILTER";
        }
        else if ((_d = error.message) === null || _d === void 0 ? void 0 : _d.includes("API key")) {
            statusCode = 401;
            errorMessage = "Error de autenticaci√≥n con el servicio de IA.";
            errorCode = "AUTH_ERROR";
        }
        else if ((_e = error.message) === null || _e === void 0 ? void 0 : _e.includes("Respuesta vac√≠a")) {
            statusCode = 503;
            errorMessage =
                "El servicio no pudo generar una respuesta. Por favor, intenta de nuevo.";
            errorCode = "EMPTY_RESPONSE";
        }
        const errorResponse = {
            success: false,
            error: errorMessage,
            code: errorCode,
            timestamp: new Date().toISOString(),
        };
        res.status(statusCode).json(errorResponse);
    }
}
exports.ZodiacController = ZodiacController;
