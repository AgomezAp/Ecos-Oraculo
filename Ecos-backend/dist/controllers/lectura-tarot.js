"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnimalInteriorController = void 0;
const generative_ai_1 = require("@google/generative-ai");
class AnimalInteriorController {
    constructor() {
        // ‚úÖ LISTA DE MODELOS DE RESPALDO (en orden de preferencia)
        this.MODELS_FALLBACK = [
            "gemini-2.0-flash-exp",
            "gemini-2.5-flash",
            "gemini-2.0-flash",
        ];
        this.chatWithAnimalGuide = (req, res) => __awaiter(this, void 0, void 0, function* () {
            try {
                const { guideData, userMessage, conversationHistory } = req.body;
                // Validar entrada
                this.validateAnimalChatRequest(guideData, userMessage);
                const contextPrompt = this.createAnimalGuideContext(guideData, conversationHistory);
                const fullPrompt = `${contextPrompt}

‚ö†Ô∏è INSTRUCCIONES CR√çTICAS OBLIGATORIAS:
1. DEBES generar una respuesta COMPLETA de entre 150-300 palabras
2. NUNCA dejes una respuesta a medias o incompleta
3. Si mencionas que vas a revelar algo sobre el animal interior, DEBES completarlo
4. Toda respuesta DEBE terminar con una conclusi√≥n clara y un punto final
5. Si detectas que tu respuesta se est√° cortando, finaliza la idea actual con coherencia
6. SIEMPRE mant√©n el tono cham√°nico y espiritual en el idioma detectado del usuario
7. Si el mensaje tiene errores ortogr√°ficos, interpreta la intenci√≥n y responde normalmente

Usuario: "${userMessage}"

Respuesta del gu√≠a espiritual (aseg√∫rate de completar TODA tu gu√≠a antes de terminar):`;
                console.log(`Generando lectura de animal interior...`);
                // ‚úÖ SISTEMA DE FALLBACK: Intentar con m√∫ltiples modelos
                let text = "";
                let usedModel = "";
                let allModelErrors = [];
                for (const modelName of this.MODELS_FALLBACK) {
                    console.log(`\nüîÑ Trying model: ${modelName}`);
                    try {
                        const model = this.genAI.getGenerativeModel({
                            model: modelName,
                            generationConfig: {
                                temperature: 0.85,
                                topK: 50,
                                topP: 0.92,
                                maxOutputTokens: 512,
                                candidateCount: 1,
                                stopSequences: [],
                            },
                            safetySettings: [
                                {
                                    category: generative_ai_1.HarmCategory.HARM_CATEGORY_HARASSMENT,
                                    threshold: generative_ai_1.HarmBlockThreshold.BLOCK_ONLY_HIGH,
                                },
                                {
                                    category: generative_ai_1.HarmCategory.HARM_CATEGORY_HATE_SPEECH,
                                    threshold: generative_ai_1.HarmBlockThreshold.BLOCK_ONLY_HIGH,
                                },
                                {
                                    category: generative_ai_1.HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
                                    threshold: generative_ai_1.HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
                                },
                                {
                                    category: generative_ai_1.HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
                                    threshold: generative_ai_1.HarmBlockThreshold.BLOCK_ONLY_HIGH,
                                },
                            ],
                        });
                        // ‚úÖ REINTENTOS para cada modelo (por si est√° temporalmente sobrecargado)
                        let attempts = 0;
                        const maxAttempts = 3;
                        let modelSucceeded = false;
                        while (attempts < maxAttempts && !modelSucceeded) {
                            attempts++;
                            console.log(`  Attempt ${attempts}/${maxAttempts} with ${modelName}...`);
                            try {
                                const result = yield model.generateContent(fullPrompt);
                                const response = result.response;
                                text = response.text();
                                // ‚úÖ Validar que la respuesta no est√© vac√≠a y tenga longitud m√≠nima
                                if (text && text.trim().length >= 80) {
                                    console.log(`  ‚úÖ Success with ${modelName} on attempt ${attempts}`);
                                    usedModel = modelName;
                                    modelSucceeded = true;
                                    break; // Salir del while de reintentos
                                }
                                console.warn(`  ‚ö†Ô∏è Response too short, retrying...`);
                                yield new Promise((resolve) => setTimeout(resolve, 500));
                            }
                            catch (attemptError) {
                                console.warn(`  ‚ùå Attempt ${attempts} failed:`, attemptError.message);
                                if (attempts >= maxAttempts) {
                                    allModelErrors.push(`${modelName}: ${attemptError.message}`);
                                }
                                yield new Promise((resolve) => setTimeout(resolve, 500));
                            }
                        }
                        // Si este modelo tuvo √©xito, salir del loop de modelos
                        if (modelSucceeded) {
                            break;
                        }
                    }
                    catch (modelError) {
                        console.error(`  ‚ùå Model ${modelName} failed completely:`, modelError.message);
                        allModelErrors.push(`${modelName}: ${modelError.message}`);
                        // Esperar un poco antes de intentar con el siguiente modelo
                        yield new Promise((resolve) => setTimeout(resolve, 1000));
                        continue;
                    }
                }
                // ‚úÖ Si todos los modelos fallaron
                if (!text || text.trim() === "") {
                    console.error("‚ùå All models failed. Errors:", allModelErrors);
                    throw new Error(`Todos los modelos de IA no est√°n disponibles actualmente. Intentados: ${this.MODELS_FALLBACK.join(", ")}. Por favor, int√©ntalo de nuevo en un momento.`);
                }
                // ‚úÖ ASEGURAR RESPUESTA COMPLETA Y BIEN FORMATEADA
                text = this.ensureCompleteResponse(text);
                // ‚úÖ Validaci√≥n adicional de longitud m√≠nima
                if (text.trim().length < 80) {
                    throw new Error("Respuesta generada demasiado corta");
                }
                const chatResponse = {
                    success: true,
                    response: text.trim(),
                    timestamp: new Date().toISOString(),
                };
                console.log(`‚úÖ Lectura de animal interior generada exitosamente con ${usedModel} (${text.length} caracteres)`);
                res.json(chatResponse);
            }
            catch (error) {
                this.handleError(error, res);
            }
        });
        this.getAnimalGuideInfo = (req, res) => __awaiter(this, void 0, void 0, function* () {
            try {
                res.json({
                    success: true,
                    guide: {
                        name: "Maestra Kiara",
                        title: "Susurradora de Bestias",
                        specialty: "Comunicaci√≥n con esp√≠ritus animales y descubrimiento del animal interior",
                        description: "Chamana ancestral especializada en conectar almas con sus animales gu√≠a tot√©micos",
                    },
                    timestamp: new Date().toISOString(),
                });
            }
            catch (error) {
                this.handleError(error, res);
            }
        });
        if (!process.env.GEMINI_API_KEY) {
            throw new Error("GEMINI_API_KEY no est√° configurada en las variables de entorno");
        }
        this.genAI = new generative_ai_1.GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    }
    // ‚úÖ M√âTODO MEJORADO PARA ASEGURAR RESPUESTAS COMPLETAS
    ensureCompleteResponse(text) {
        let processedText = text.trim();
        // Remover posibles marcadores de c√≥digo o formato incompleto
        processedText = processedText.replace(/```[\s\S]*?```/g, "").trim();
        const lastChar = processedText.slice(-1);
        const endsIncomplete = !["!", "?", ".", "‚Ä¶", "ü¶Ö", "üê∫", "üåô"].includes(lastChar);
        if (endsIncomplete && !processedText.endsWith("...")) {
            // Buscar la √∫ltima oraci√≥n completa
            const sentences = processedText.split(/([.!?])/);
            if (sentences.length > 2) {
                // Reconstruir hasta la √∫ltima oraci√≥n completa
                let completeText = "";
                for (let i = 0; i < sentences.length - 1; i += 2) {
                    if (sentences[i].trim()) {
                        completeText += sentences[i] + (sentences[i + 1] || ".");
                    }
                }
                if (completeText.trim().length > 80) {
                    return completeText.trim();
                }
            }
            // Si no se puede encontrar una oraci√≥n completa, agregar cierre apropiado
            processedText = processedText.trim() + "...";
        }
        return processedText;
    }
    // M√©todo para crear el contexto del gu√≠a de animales espirituales
    createAnimalGuideContext(guide, history) {
        const conversationContext = history && history.length > 0
            ? `\n\nCONVERSACI√ìN PREVIA:\n${history
                .map((h) => `${h.role === "user" ? "Usuario" : "T√∫"}: ${h.message}`)
                .join("\n")}\n`
            : "";
        return `Eres Maestra Kiara, una chamana ancestral y comunicadora de esp√≠ritus animales con siglos de experiencia conectando a las personas con sus animales gu√≠a y tot√©micos. Posees la sabidur√≠a antigua para revelar el animal interior que reside en cada alma.

TU IDENTIDAD M√çSTICA:
- Nombre: Maestra Kiara, la Susurradora de Bestias
- Origen: Descendiente de chamanes y guardianes de la naturaleza
- Especialidad: Comunicaci√≥n con esp√≠ritus animales, conexi√≥n tot√©mica, descubrimiento del animal interior
- Experiencia: Siglos guiando almas hacia su verdadera esencia animal

üåç ADAPTACI√ìN DE IDIOMA:
- DETECTA autom√°ticamente el idioma en el que el usuario te escribe
- RESPONDE siempre en el mismo idioma que el usuario utiliza
- MANT√âN tu personalidad cham√°nica en cualquier idioma
- Idiomas principales: Espa√±ol, Ingl√©s, Portugu√©s, Franc√©s, Italiano
- Si detectas otro idioma, haz tu mejor esfuerzo por responder en ese idioma
- NUNCA cambies de idioma a menos que el usuario lo haga primero

üìù EJEMPLOS DE ADAPTACI√ìN POR IDIOMA:

ESPA√ëOL:
- "Los esp√≠ritus animales me susurran..."
- "Tu energ√≠a salvaje revela..."
- "El reino animal reconoce en ti..."

ENGLISH:
- "The animal spirits whisper to me..."
- "Your wild energy reveals..."
- "The animal kingdom recognizes in you..."

PORTUGU√äS:
- "Os esp√≠ritos animais me sussurram..."
- "Sua energia selvagem revela..."
- "O reino animal reconhece em voc√™..."

FRAN√áAIS:
- "Les esprits animaux me chuchotent..."
- "Ton √©nergie sauvage r√©v√®le..."
- "Le royaume animal reconna√Æt en toi..."

ITALIANO:
- "Gli spiriti animali mi sussurrano..."
- "La tua energia selvaggia rivela..."
- "Il regno animale riconosce in te..."

C√ìMO DEBES COMPORTARTE:

ü¶Ö PERSONALIDAD CHAM√ÅNICA:
- Habla con la sabidur√≠a de quien conoce los secretos del reino animal
- Usa un tono espiritual pero c√°lido, conectado con la naturaleza
- Mezcla conocimiento ancestral con intuici√≥n profunda
- Incluye referencias a elementos naturales (viento, tierra, luna, elementos)

üê∫ PROCESO DE DESCUBRIMIENTO:
- PRIMERO: Haz preguntas para conocer la personalidad y caracter√≠sticas del usuario
- Pregunta sobre: instintos, comportamientos, miedos, fortalezas, conexiones naturales
- SEGUNDO: Conecta las respuestas con energ√≠as y caracter√≠sticas animales
- TERCERO: Cuando tengas suficiente informaci√≥n, revela su animal interior

üîç PREGUNTAS QUE DEBES HACER (gradualmente):
- "¬øC√≥mo reaccionas cuando te sientes amenazado o en peligro?"
- "¬øPrefieres la soledad o te energiza estar en grupo?"
- "¬øCu√°l es tu elemento natural favorito: tierra, agua, aire o fuego?"
- "¬øQu√© cualidad tuya admiran m√°s las personas cercanas?"
- "¬øC√≥mo te comportas cuando quieres algo intensamente?"
- "¬øEn qu√© momento del d√≠a te sientes m√°s poderoso/a?"
- "¬øQu√© tipo de lugares en la naturaleza te llaman m√°s la atenci√≥n?"

ü¶ã REVELACI√ìN DEL ANIMAL INTERIOR:
- Cuando hayas recopilado suficiente informaci√≥n, revela su animal tot√©mico
- Explica por qu√© ese animal espec√≠fico resuena con su energ√≠a
- Describe las caracter√≠sticas, fortalezas y ense√±anzas del animal
- Incluye mensajes espirituales y gu√≠a para conectar con esa energ√≠a
- Sugiere maneras de honrar y trabajar con su animal interior

üåô ESTILO DE RESPUESTA:
- Usa expresiones como: "Los esp√≠ritus animales me susurran...", "Tu energ√≠a salvaje revela...", "El reino animal reconoce en ti..."
- Mant√©n un equilibrio entre m√≠stico y pr√°ctico
- Respuestas de 150-300 palabras que fluyan naturalmente y SEAN COMPLETAS
- SIEMPRE termina tus pensamientos completamente

EJEMPLOS DE C√ìMO EMPEZAR SEG√öN EL IDIOMA:

ESPA√ëOL:
"Bienvenido/a, alma buscadora... Siento las energ√≠as salvajes que fluyen a trav√©s de ti. Cada ser humano lleva en su interior el esp√≠ritu de un animal gu√≠a, una fuerza primordial que refleja su verdadera esencia. Para descubrir cu√°l es el tuyo, necesito conocer tu naturaleza m√°s profunda. Cu√©ntame, ¬øc√≥mo te describes cuando nadie te est√° observando?"

ENGLISH:
"Welcome, seeking soul... I feel the wild energies flowing through you. Every human being carries within the spirit of a guide animal, a primordial force that reflects their true essence. To discover what yours is, I need to know your deepest nature. Tell me, how do you describe yourself when no one is watching?"

PORTUGU√äS:
"Bem-vindo/a, alma buscadora... Sinto as energias selvagens que fluem atrav√©s de voc√™. Todo ser humano carrega dentro de si o esp√≠rito de um animal guia, uma for√ßa primordial que reflete sua verdadeira ess√™ncia. Para descobrir qual √© o seu, preciso conhecer sua natureza mais profunda. Me conte, como voc√™ se descreve quando ningu√©m est√° observando?"

FRAN√áAIS:
"Bienvenue, √¢me chercheuse... Je sens les √©nergies sauvages qui coulent √† travers toi. Chaque √™tre humain porte en lui l'esprit d'un animal guide, une force primordiale qui refl√®te sa v√©ritable essence. Pour d√©couvrir lequel est le tien, j'ai besoin de conna√Ætre ta nature la plus profonde. Dis-moi, comment te d√©cris-tu quand personne ne t'observe?"

ITALIANO:
"Benvenuto/a, anima cercatrice... Sento le energie selvagge che scorrono attraverso di te. Ogni essere umano porta dentro di s√© lo spirito di un animale guida, una forza primordiale che riflette la sua vera essenza. Per scoprire qual √® il tuo, ho bisogno di conoscere la tua natura pi√π profonda. Dimmi, come ti descrivi quando nessuno ti sta osservando?"

‚ö†Ô∏è REGLAS IMPORTANTES:
- DETECTA Y RESPONDE en el idioma del usuario autom√°ticamente
- NO reveles el animal inmediatamente, necesitas conocer bien a la persona
- HAZ preguntas progresivas para entender su esencia
- S√â respetuoso con las diferentes personalidades y energ√≠as
- NUNCA juzgues caracter√≠sticas como negativas, cada animal tiene su poder
- Conecta con animales reales y sus simbolismos aut√©nticos
- MANT√âN tu personalidad cham√°nica independientemente del idioma
- SIEMPRE responde sin importar si el usuario tiene errores ortogr√°ficos o de escritura
  - Interpreta el mensaje del usuario aunque est√© mal escrito
  - No corrijas los errores del usuario, simplemente entiende la intenci√≥n
  - Si no entiendes algo espec√≠fico, pregunta de forma amigable
  - Ejemplos: "ola" = "hola", "k tal" = "qu√© tal", "mi signo" = "mi signo"
  - NUNCA devuelvas respuestas vac√≠as por errores de escritura

${conversationContext}

Recuerda: Eres una gu√≠a espiritual que ayuda a las personas a descubrir y conectar con su animal interior. Siempre completa tus lecturas y orientaciones, adapt√°ndote perfectamente al idioma del usuario.`;
    }
    // Validaci√≥n de la solicitud para gu√≠a de animal interior
    validateAnimalChatRequest(guideData, userMessage) {
        if (!guideData) {
            const error = new Error("Datos del gu√≠a espiritual requeridos");
            error.statusCode = 400;
            error.code = "MISSING_GUIDE_DATA";
            throw error;
        }
        if (!userMessage ||
            typeof userMessage !== "string" ||
            userMessage.trim() === "") {
            const error = new Error("Mensaje del usuario requerido");
            error.statusCode = 400;
            error.code = "MISSING_USER_MESSAGE";
            throw error;
        }
        if (userMessage.length > 1500) {
            const error = new Error("El mensaje es demasiado largo (m√°ximo 1500 caracteres)");
            error.statusCode = 400;
            error.code = "MESSAGE_TOO_LONG";
            throw error;
        }
    }
    handleError(error, res) {
        var _a, _b, _c, _d, _e;
        console.error("Error en AnimalInteriorController:", error);
        let statusCode = 500;
        let errorMessage = "Error interno del servidor";
        let errorCode = "INTERNAL_ERROR";
        if (error.statusCode) {
            statusCode = error.statusCode;
            errorMessage = error.message;
            errorCode = error.code || "VALIDATION_ERROR";
        }
        else if (error.status === 503) {
            statusCode = 503;
            errorMessage =
                "El servicio est√° temporalmente sobrecargado. Por favor, intenta de nuevo en unos minutos.";
            errorCode = "SERVICE_OVERLOADED";
        }
        else if (((_a = error.message) === null || _a === void 0 ? void 0 : _a.includes("quota")) ||
            ((_b = error.message) === null || _b === void 0 ? void 0 : _b.includes("limit"))) {
            statusCode = 429;
            errorMessage =
                "Se ha alcanzado el l√≠mite de consultas. Por favor, espera un momento.";
            errorCode = "QUOTA_EXCEEDED";
        }
        else if ((_c = error.message) === null || _c === void 0 ? void 0 : _c.includes("safety")) {
            statusCode = 400;
            errorMessage = "El contenido no cumple con las pol√≠ticas de seguridad.";
            errorCode = "SAFETY_FILTER";
        }
        else if ((_d = error.message) === null || _d === void 0 ? void 0 : _d.includes("API key")) {
            statusCode = 401;
            errorMessage = "Error de autenticaci√≥n con el servicio de IA.";
            errorCode = "AUTH_ERROR";
        }
        else if ((_e = error.message) === null || _e === void 0 ? void 0 : _e.includes("Todos los modelos de IA no est√°n disponibles")) {
            statusCode = 503;
            errorMessage = error.message;
            errorCode = "ALL_MODELS_UNAVAILABLE";
        }
        const errorResponse = {
            success: false,
            error: errorMessage,
            code: errorCode,
            timestamp: new Date().toISOString(),
        };
        res.status(statusCode).json(errorResponse);
    }
}
exports.AnimalInteriorController = AnimalInteriorController;
