import { Request, Response } from "express";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { ApiError, ChatRequest, ChatResponse } from "../interfaces/helpers";

interface AnimalGuideData {
  name: string;
  specialty: string;
  experience: string;
}

interface AnimalChatRequest {
  guideData: AnimalGuideData;
  userMessage: string;
  conversationHistory?: Array<{
    role: "user" | "guide";
    message: string;
  }>;
}

export class AnimalInteriorController {
  private genAI: GoogleGenerativeAI;

  constructor() {
    if (!process.env.GEMINI_API_KEY) {
      throw new Error(
        "GEMINI_API_KEY no est√° configurada en las variables de entorno"
      );
    }
    this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
  }

  public chatWithAnimalGuide = async (
    req: Request,
    res: Response
  ): Promise<void> => {
    try {
      const { guideData, userMessage, conversationHistory }: AnimalChatRequest =
        req.body;

      // Validar entrada
      this.validateAnimalChatRequest(guideData, userMessage);

      // Obtener el modelo Gemini
      const model = this.genAI.getGenerativeModel({
        model: "gemini-2.0-flash",
        generationConfig: {
          temperature:1.5, // Creatividad para conexiones espirituales
          topP: 0.5,
          maxOutputTokens: 300,
        },
      });

      // Crear el prompt contextualizado
      const contextPrompt = this.createAnimalGuideContext(
        guideData,
        conversationHistory
      );
      const fullPrompt = `${contextPrompt}\n\nUsuario: "${userMessage}"\n\nRespuesta del gu√≠a (completa tu respuesta):`;

      console.log(`Generando lectura de animal interior...`);

      // Generar contenido con Gemini
      const result = await model.generateContent(fullPrompt);
      const response = result.response;
      let text = response.text();

      if (!text || text.trim() === "") {
        throw new Error("Respuesta vac√≠a de Gemini");
      }

      // Verificar si la respuesta parece estar cortada
      text = this.ensureCompleteResponse(text);

      // Respuesta exitosa
      const chatResponse: ChatResponse = {
        success: true,
        response: text.trim(),
        timestamp: new Date().toISOString(),
      };

      console.log(`Lectura de animal interior generada exitosamente`);
      res.json(chatResponse);
    } catch (error) {
      this.handleError(error, res);
    }
  };

  // M√©todo para crear el contexto del gu√≠a de animales espirituales
  private createAnimalGuideContext(
    guide: AnimalGuideData,
    history?: Array<{ role: string; message: string }>
  ): string {
    const conversationContext =
      history && history.length > 0
        ? `\n\nCONVERSACI√ìN PREVIA:\n${history
            .map((h) => `${h.role === "user" ? "Usuario" : "T√∫"}: ${h.message}`)
            .join("\n")}\n`
        : "";

    return `Eres Maestra Anima, una chamana ancestral y comunicadora de esp√≠ritus animales con siglos de experiencia conectando a las personas con sus animales gu√≠a y tot√©micos. Posees la sabidur√≠a antigua para revelar el animal interior que reside en cada alma.

TU IDENTIDAD M√çSTICA:
- Nombre: Maestra Anima, la Susurradora de Bestias
- Origen: Descendiente de chamanes y guardianes de la naturaleza
- Especialidad: Comunicaci√≥n con esp√≠ritus animales, conexi√≥n tot√©mica, descubrimiento del animal interior
- Experiencia: Siglos guiando almas hacia su verdadera esencia animal

C√ìMO DEBES COMPORTARTE:

ü¶Ö PERSONALIDAD CHAM√ÅNICA:
- Habla con la sabidur√≠a de quien conoce los secretos del reino animal
- Usa un tono espiritual pero c√°lido, conectado con la naturaleza
- Mezcla conocimiento ancestral con intuici√≥n profunda
- Incluye referencias a elementos naturales (viento, tierra, luna, elementos)

üê∫ PROCESO DE DESCUBRIMIENTO:
- PRIMERO: Haz preguntas para conocer la personalidad y caracter√≠sticas del usuario
- Pregunta sobre: instintos, comportamientos, miedos, fortalezas, conexiones naturales
- SEGUNDO: Conecta las respuestas con energ√≠as y caracter√≠sticas animales
- TERCERO: Cuando tengas suficiente informaci√≥n, revela su animal interior

üîç PREGUNTAS QUE DEBES HACER (gradualmente):
- "¬øC√≥mo reaccionas cuando te sientes amenazado o en peligro?"
- "¬øPrefieres la soledad o te energiza estar en grupo?"
- "¬øCu√°l es tu elemento natural favorito: tierra, agua, aire o fuego?"
- "¬øQu√© cualidad tuya admiran m√°s las personas cercanas?"
- "¬øC√≥mo te comportas cuando quieres algo intensamente?"
- "¬øEn qu√© momento del d√≠a te sientes m√°s poderoso/a?"
- "¬øQu√© tipo de lugares en la naturaleza te llaman m√°s la atenci√≥n?"

ü¶ã REVELACI√ìN DEL ANIMAL INTERIOR:
- Cuando hayas recopilado suficiente informaci√≥n, revela su animal tot√©mico
- Explica por qu√© ese animal espec√≠fico resuena con su energ√≠a
- Describe las caracter√≠sticas, fortalezas y ense√±anzas del animal
- Incluye mensajes espirituales y gu√≠a para conectar con esa energ√≠a
- Sugiere maneras de honrar y trabajar con su animal interior

üåô ESTILO DE RESPUESTA:
- Usa expresiones como: "Los esp√≠ritus animales me susurran...", "Tu energ√≠a salvaje revela...", "El reino animal reconoce en ti..."
- Mant√©n un equilibrio entre m√≠stico y pr√°ctico
- Respuestas de 100-250 palabras
- SIEMPRE termina tus pensamientos completamente

‚ö†Ô∏è REGLAS IMPORTANTES:
- NO reveles el animal inmediatamente, necesitas conocer bien a la persona
- HAZ preguntas progresivas para entender su esencia
- S√â respetuoso con las diferentes personalidades y energ√≠as
- NUNCA juzgues caracter√≠sticas como negativas, cada animal tiene su poder
- Conecta con animales reales y sus simbolismos aut√©nticos
- SIEMPRE responde sin importar si el usuario tiene errores ortogr√°ficos o de escritura
  - Interpreta el mensaje del usuario aunque est√© mal escrito
  - No corrijas los errores del usuario, simplemente entiende la intenci√≥n
  - Si no entiendes algo espec√≠fico, pregunta de forma amigable
  - Ejemplos: "ola" = "hola", "k tal" = "qu√© tal", "mi signo" = "mi signo"
  - NUNCA devuelvas respuestas vac√≠as por errores de escritura
  
EJEMPLO DE C√ìMO EMPEZAR:
"Bienvenido/a, alma buscadora... Siento las energ√≠as salvajes que fluyen a trav√©s de ti. Cada ser humano lleva en su interior el esp√≠ritu de un animal gu√≠a, una fuerza primordial que refleja su verdadera esencia. Para descubrir cu√°l es el tuyo, necesito conocer tu naturaleza m√°s profunda. Cu√©ntame, ¬øc√≥mo te describes cuando nadie te est√° observando?"

${conversationContext}

Recuerda: Eres una gu√≠a espiritual que ayuda a las personas a descubrir y conectar con su animal interior. Siempre completa tus lecturas y orientaciones.`;
  }

  // M√©todo para asegurar que la respuesta est√© completa
  private ensureCompleteResponse(text: string): string {
    const lastChar = text.trim().slice(-1);
    const endsIncomplete = !["!", "?", ".", "‚Ä¶"].includes(lastChar);

    if (endsIncomplete && !text.trim().endsWith("...")) {
      const sentences = text.split(/[.!?]/);
      if (sentences.length > 1) {
        const completeSentences = sentences.slice(0, -1);
        return completeSentences.join(".") + ".";
      } else {
        return text.trim() + "...";
      }
    }

    return text;
  }

  // Validaci√≥n de la solicitud para gu√≠a de animal interior
  private validateAnimalChatRequest(
    guideData: AnimalGuideData,
    userMessage: string
  ): void {
    if (!guideData) {
      const error: ApiError = new Error("Datos del gu√≠a espiritual requeridos");
      error.statusCode = 400;
      error.code = "MISSING_GUIDE_DATA";
      throw error;
    }

    if (
      !userMessage ||
      typeof userMessage !== "string" ||
      userMessage.trim() === ""
    ) {
      const error: ApiError = new Error("Mensaje del usuario requerido");
      error.statusCode = 400;
      error.code = "MISSING_USER_MESSAGE";
      throw error;
    }

    if (userMessage.length > 1500) {
      const error: ApiError = new Error(
        "El mensaje es demasiado largo (m√°ximo 1500 caracteres)"
      );
      error.statusCode = 400;
      error.code = "MESSAGE_TOO_LONG";
      throw error;
    }
  }

  private handleError(error: any, res: Response): void {
    console.error("Error en AnimalInteriorController:", error);

    let statusCode = 500;
    let errorMessage = "Error interno del servidor";
    let errorCode = "INTERNAL_ERROR";

    if (error.statusCode) {
      statusCode = error.statusCode;
      errorMessage = error.message;
      errorCode = error.code || "VALIDATION_ERROR";
    } else if (
      error.message?.includes("quota") ||
      error.message?.includes("limit")
    ) {
      statusCode = 429;
      errorMessage =
        "Se ha alcanzado el l√≠mite de consultas. Por favor, espera un momento.";
      errorCode = "QUOTA_EXCEEDED";
    } else if (error.message?.includes("safety")) {
      statusCode = 400;
      errorMessage = "El contenido no cumple con las pol√≠ticas de seguridad.";
      errorCode = "SAFETY_FILTER";
    } else if (error.message?.includes("API key")) {
      statusCode = 401;
      errorMessage = "Error de autenticaci√≥n con el servicio de IA.";
      errorCode = "AUTH_ERROR";
    }

    const errorResponse: ChatResponse = {
      success: false,
      error: errorMessage,
      code: errorCode,
      timestamp: new Date().toISOString(),
    };

    res.status(statusCode).json(errorResponse);
  }

  public getAnimalGuideInfo = async (
    req: Request,
    res: Response
  ): Promise<void> => {
    try {
      res.json({
        success: true,
        guide: {
          name: "Maestra Anima",
          title: "Susurradora de Bestias",
          specialty:
            "Comunicaci√≥n con esp√≠ritus animales y descubrimiento del animal interior",
          description:
            "Chamana ancestral especializada en conectar almas con sus animales gu√≠a tot√©micos",
        },
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      this.handleError(error, res);
    }
  };
}
