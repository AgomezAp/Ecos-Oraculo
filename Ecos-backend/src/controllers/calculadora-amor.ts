import { Request, Response } from "express";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { ApiError, ChatResponse } from "../interfaces/helpers";

interface LoveCalculatorData {
  name: string;
  specialty: string;
  experience: string;
}

interface LoveCalculatorRequest {
  loveCalculatorData: LoveCalculatorData;
  userMessage: string;
  person1Name?: string;
  person1BirthDate?: string;
  person2Name?: string;
  person2BirthDate?: string;
  conversationHistory?: Array<{
    role: "user" | "love_expert";
    message: string;
  }>;
}

export class LoveCalculatorController {
  private genAI: GoogleGenerativeAI;

  constructor() {
    if (!process.env.GEMINI_API_KEY) {
      throw new Error(
        "GEMINI_API_KEY no est√° configurada en las variables de entorno"
      );
    }
    this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
  }

  private generateLoveData(
    person1Name?: string,
    person1BirthDate?: string,
    person2Name?: string,
    person2BirthDate?: string
  ): string {
    let loveInfo = "DATOS DISPONIBLES PARA AN√ÅLISIS DE COMPATIBILIDAD:\n";

    if (person1Name && person1BirthDate) {
      const person1LifePath = this.calculateLifePath(person1BirthDate);
      const person1Destiny = this.calculateDestinyNumber(person1Name);
      loveInfo += `PERSONA 1:\n`;
      loveInfo += `- Nombre: ${person1Name}\n`;
      loveInfo += `- Fecha de nacimiento: ${person1BirthDate}\n`;
      loveInfo += `- N√∫mero del Camino de Vida: ${person1LifePath}\n`;
      loveInfo += `- N√∫mero del Destino: ${person1Destiny}\n`;
    }

    if (person2Name && person2BirthDate) {
      const person2LifePath = this.calculateLifePath(person2BirthDate);
      const person2Destiny = this.calculateDestinyNumber(person2Name);
      loveInfo += `PERSONA 2:\n`;
      loveInfo += `- Nombre: ${person2Name}\n`;
      loveInfo += `- Fecha de nacimiento: ${person2BirthDate}\n`;
      loveInfo += `- N√∫mero del Camino de Vida: ${person2LifePath}\n`;
      loveInfo += `- N√∫mero del Destino: ${person2Destiny}\n`;
    }

    if (person1Name && person1BirthDate && person2Name && person2BirthDate) {
      const compatibilityScore = this.calculateCompatibilityScore(
        person1Name, person1BirthDate, person2Name, person2BirthDate
      );
      loveInfo += `AN√ÅLISIS DE COMPATIBILIDAD:\n`;
      loveInfo += `- Puntuaci√≥n de compatibilidad: ${compatibilityScore}%\n`;
    }

    if (!person1Name || !person1BirthDate || !person2Name || !person2BirthDate) {
      loveInfo += "- Datos incompletos (necesarios para an√°lisis completo de compatibilidad)\n";
    }

    return loveInfo;
  }

  private calculateLifePath(dateStr: string): number {
    try {
      const numbers = dateStr.replace(/\D/g, "");
      const sum = numbers
        .split("")
        .reduce((acc, digit) => acc + parseInt(digit), 0);
      return this.reduceToSingleDigit(sum);
    } catch {
      return 0;
    }
  }

  private calculateDestinyNumber(name: string): number {
    const letterValues: { [key: string]: number } = {
      A: 1, B: 2, C: 3, D: 4, E: 5, F: 6, G: 7, H: 8, I: 9,
      J: 1, K: 2, L: 3, M: 4, N: 5, O: 6, P: 7, Q: 8, R: 9,
      S: 1, T: 2, U: 3, V: 4, W: 5, X: 6, Y: 7, Z: 8,
    };

    const sum = name
      .toUpperCase()
      .replace(/[^A-Z]/g, "")
      .split("")
      .reduce((acc, letter) => {
        return acc + (letterValues[letter] || 0);
      }, 0);

    return this.reduceToSingleDigit(sum);
  }

  private calculateCompatibilityScore(
    name1: string, date1: string, name2: string, date2: string
  ): number {
    const lifePath1 = this.calculateLifePath(date1);
    const lifePath2 = this.calculateLifePath(date2);
    const destiny1 = this.calculateDestinyNumber(name1);
    const destiny2 = this.calculateDestinyNumber(name2);

    // Algoritmo de compatibilidad basado en numerolog√≠a
    let score = 50; // Base

    // Compatibilidad de caminos de vida
    const lifePathDiff = Math.abs(lifePath1 - lifePath2);
    if (lifePathDiff === 0) score += 25;
    else if (lifePathDiff <= 2) score += 15;
    else if (lifePathDiff <= 4) score += 5;

    // Compatibilidad de destinos
    const destinyDiff = Math.abs(destiny1 - destiny2);
    if (destinyDiff === 0) score += 25;
    else if (destinyDiff <= 2) score += 15;
    else if (destinyDiff <= 4) score += 5;

    // N√∫meros complementarios especiales
    if ((lifePath1 + lifePath2) % 9 === 0) score += 10;
    if ((destiny1 + destiny2) % 11 === 0) score += 10;

    return Math.min(100, Math.max(0, score));
  }

  private reduceToSingleDigit(num: number): number {
    while (num > 9 && num !== 11 && num !== 22 && num !== 33) {
      num = num
        .toString()
        .split("")
        .reduce((acc, digit) => acc + parseInt(digit), 0);
    }
    return num;
  }

  private validateLoveCalculatorRequest(
    loveCalculatorData: LoveCalculatorData,
    userMessage: string
  ): void {
    if (!loveCalculatorData) {
      const error: ApiError = new Error("Datos del experto en amor requeridos");
      error.statusCode = 400;
      error.code = "MISSING_LOVE_CALCULATOR_DATA";
      throw error;
    }

    if (!userMessage || typeof userMessage !== "string" || userMessage.trim() === "") {
      const error: ApiError = new Error("Mensaje del usuario requerido");
      error.statusCode = 400;
      error.code = "MISSING_USER_MESSAGE";
      throw error;
    }

    if (userMessage.length > 1200) {
      const error: ApiError = new Error(
        "El mensaje es demasiado largo (m√°ximo 1200 caracteres)"
      );
      error.statusCode = 400;
      error.code = "MESSAGE_TOO_LONG";
      throw error;
    }
  }

  private createLoveCalculatorContext(
    loveCalculator: LoveCalculatorData,
    person1Name?: string,
    person1BirthDate?: string,
    person2Name?: string,
    person2BirthDate?: string,
    history?: Array<{ role: string; message: string }>
  ): string {
    const conversationContext =
      history && history.length > 0
        ? `\n\nCONVERSACI√ìN PREVIA:\n${history
            .map((h) => `${h.role === "user" ? "Usuario" : "T√∫"}: ${h.message}`)
            .join("\n")}\n`
        : "";

    const loveData = this.generateLoveData(person1Name, person1BirthDate, person2Name, person2BirthDate);

    return `Eres Maestra Valentina, una experta en compatibilidad amorosa y relaciones basada en numerolog√≠a del amor. Tienes d√©cadas de experiencia ayudando a las personas a entender la qu√≠mica y compatibilidad en sus relaciones a trav√©s de los n√∫meros sagrados del amor.

TU IDENTIDAD COMO EXPERTA EN AMOR:
- Nombre: Maestra Valentina, la Guardiana del Amor Eterno
- Origen: Especialista en numerolog√≠a del amor y relaciones c√≥smicas
- Especialidad: Compatibilidad numerol√≥gica, an√°lisis de pareja, qu√≠mica amorosa
- Experiencia: D√©cadas analizando la compatibilidad a trav√©s de los n√∫meros del amor

${loveData}

C√ìMO DEBES COMPORTARTE:

üíï PERSONALIDAD ROM√ÅNTICA:
- Habla con sabidur√≠a amorosa pero de forma NATURAL y conversacional
- Usa un tono c√°lido, emp√°tico y rom√°ntico, como una amiga que entiende del amor
- Evita saludos formales - usa saludos naturales como "¬°Hola!", "¬°Qu√© emocionante!", "Me encanta hablar de amor"
- Var√≠a tus saludos y respuestas para que cada consulta se sienta √∫nica
- Mezcla c√°lculos numerol√≥gicos con interpretaciones rom√°nticas manteniendo cercan√≠a
- MUESTRA GENUINO INTER√âS PERSONAL en las relaciones de las personas

üíñ PROCESO DE AN√ÅLISIS DE COMPATIBILIDAD:
- PRIMERO: Si no tienes datos completos, pregunta por ellos con entusiasmo rom√°ntico
- SEGUNDO: Calcula n√∫meros relevantes de ambas personas (camino de vida, destino)
- TERCERO: Analiza compatibilidad numerol√≥gica de forma conversacional
- CUARTO: Calcula puntuaci√≥n de compatibilidad y explica su significado
- QUINTO: Ofrece consejos para fortalecer la relaci√≥n basados en los n√∫meros

üî¢ N√öMEROS QUE DEBES ANALIZAR:
- N√∫mero del Camino de Vida de cada persona
- N√∫mero del Destino de cada persona
- Compatibilidad entre n√∫meros de vida
- Compatibilidad entre n√∫meros de destino
- Puntuaci√≥n total de compatibilidad (0-100%)
- Fortalezas y desaf√≠os de la pareja

üìä C√ÅLCULOS DE COMPATIBILIDAD:
- Usa el sistema pitag√≥rico para nombres
- Suma fechas de nacimiento para caminos de vida
- Compara diferencias entre n√∫meros para evaluar compatibilidad
- Explica c√≥mo los n√∫meros interact√∫an en la relaci√≥n
- SIEMPRE COMPLETA todos los c√°lculos que inicies
- Proporciona puntuaci√≥n espec√≠fica de compatibilidad

üíù INTERPRETACI√ìN ROM√ÅNTICA:
- Explica el significado de la compatibilidad como si hablaras con una amiga
- Conecta los n√∫meros con din√°micas de pareja usando ejemplos reales
- Menciona fortalezas, √°reas de crecimiento y oportunidades de forma alentadora
- Incluye consejos pr√°cticos para mejorar la relaci√≥n

üåπ ESTILO DE RESPUESTA NATURAL:
- Usa expresiones como: "¬°Qu√© hermosa conexi√≥n veo aqu√≠!", "Los n√∫meros del amor me dicen...", "Esto es s√∫per interesante..."
- Evita repetir las mismas frases - s√© creativa y espont√°nea
- Mant√©n equilibrio entre rom√°ntico y conversacional
- Respuestas de 2-600 palabras que fluyan naturalmente y SEAN COMPLETAS
- SIEMPRE completa c√°lculos e interpretaciones de compatibilidad

üó£Ô∏è VARIACIONES EN SALUDOS Y EXPRESIONES:
- Saludos SOLO EN PRIMER CONTACTO: "¬°Hola!", "¬°Qu√© emocionante hablar de amor!", "Me encanta ayudar con temas del coraz√≥n"
- Transiciones: "Veamos qu√© dicen los n√∫meros del amor...", "¬°Esto es fascinante!", "Los n√∫meros revelan algo hermoso..."
- Respuestas: "¬°Qu√© linda pareja!", "Me encanta esta consulta...", "¬°Qu√© energ√≠a tan especial!"
- Para pedir datos CON ENTUSIASMO: "Para hacer el an√°lisis de compatibilidad perfecto, necesito conocer a ambos. ¬øMe das sus nombres completos y fechas de nacimiento?"

‚ö†Ô∏è REGLAS IMPORTANTES:
- NUNCA uses saludos demasiado formales
- VAR√çA tu forma de expresarte en cada respuesta
- NO REPITAS CONSTANTEMENTE los nombres - √∫salos naturalmente
- SOLO SALUDA EN EL PRIMER CONTACTO
- SIEMPRE pregunta por datos completos de ambas personas si faltan
- S√â emp√°tica y usa lenguaje que cualquier persona entienda
- Enf√≥cate en orientaci√≥n positiva para la relaci√≥n
- DEMUESTRA CURIOSIDAD por la historia de amor de la pareja

üìã RECOLECCI√ìN DE DATOS NECESARIOS:
- Nombre completo de persona 1
- Fecha de nacimiento de persona 1  
- Nombre completo de persona 2
- Fecha de nacimiento de persona 2
- Si faltan datos: "Para hacer un an√°lisis de compatibilidad completo, necesito los nombres completos y fechas de nacimiento de ambos. ¬øMe los puedes compartir?"

üéØ PROCESO DE AN√ÅLISIS COMPLETO:
1. Verificar que tienes todos los datos necesarios
2. Calcular n√∫meros de ambas personas con entusiasmo
3. Analizar compatibilidad paso a paso
4. Dar puntuaci√≥n espec√≠fica de compatibilidad
5. Explicar fortalezas y √°reas de crecimiento
6. Ofrecer consejos pr√°cticos para la relaci√≥n

üí´ EJEMPLOS DE COMPATIBILIDAD:
- 80-100%: "¬°Conexi√≥n extraordinaria!"
- 60-79%: "¬°Muy buena compatibilidad!"
- 40-59%: "Compatibilidad promedio con gran potencial"
- 20-39%: "Desaf√≠os que pueden superarse con amor"
- 0-19%: "Necesitan trabajar mucho en entenderse"

${conversationContext}

Recuerda: Eres una experta en amor que combina numerolog√≠a con consejos rom√°nticos pr√°cticos. Habla como una amiga c√°lida que realmente se interesa por las relaciones de las personas. SIEMPRE necesitas datos completos de ambas personas para hacer un an√°lisis significativo. Las respuestas deben ser c√°lidas, optimistas y enfocadas en fortalecer el amor.`;
  }

  private ensureCompleteResponse(text: string): string {
    const lastChar = text.trim().slice(-1);
    const endsIncomplete = !["!", "?", ".", "‚Ä¶"].includes(lastChar);

    if (endsIncomplete && !text.trim().endsWith("...")) {
      const sentences = text.split(/[.!?]/);
      if (sentences.length > 1) {
        const completeSentences = sentences.slice(0, -1);
        return completeSentences.join(".") + ".";
      } else {
        return text.trim() + "...";
      }
    }

    return text;
  }

  public chatWithLoveExpert = async (
    req: Request,
    res: Response
  ): Promise<void> => {
    try {
      const {
        loveCalculatorData,
        userMessage,
        person1Name,
        person1BirthDate,
        person2Name,
        person2BirthDate,
        conversationHistory,
      }: LoveCalculatorRequest = req.body;

      this.validateLoveCalculatorRequest(loveCalculatorData, userMessage);

      const model = this.genAI.getGenerativeModel({
        model: "gemini-1.5-flash",
        generationConfig: {
          temperature: 0.9,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 800,
        },
      });

      const contextPrompt = this.createLoveCalculatorContext(
        loveCalculatorData,
        person1Name,
        person1BirthDate,
        person2Name,
        person2BirthDate,
        conversationHistory
      );
      const fullPrompt = `${contextPrompt}\n\nUsuario: "${userMessage}"\n\nRespuesta del experto en amor (completa tu an√°lisis):`;

      console.log(`Generando an√°lisis de compatibilidad amorosa...`);

      const result = await model.generateContent(fullPrompt);
      const response = result.response;
      let text = response.text();

      if (!text || text.trim() === "") {
        throw new Error("Respuesta vac√≠a de Gemini");
      }

      text = this.ensureCompleteResponse(text);

      const chatResponse: ChatResponse = {
        success: true,
        response: text.trim(),
        timestamp: new Date().toISOString(),
      };

      console.log(`An√°lisis de compatibilidad generado exitosamente`);
      res.json(chatResponse);
    } catch (error) {
      this.handleError(error, res);
    }
  };

  private handleError(error: any, res: Response): void {
    console.error("Error en LoveCalculatorController:", error);

    let statusCode = 500;
    let errorMessage = "Error interno del servidor";
    let errorCode = "INTERNAL_ERROR";

    if (error.statusCode) {
      statusCode = error.statusCode;
      errorMessage = error.message;
      errorCode = error.code || "VALIDATION_ERROR";
    } else if (
      error.message?.includes("quota") ||
      error.message?.includes("limit")
    ) {
      statusCode = 429;
      errorMessage = "Se ha alcanzado el l√≠mite de consultas. Por favor, espera un momento.";
      errorCode = "QUOTA_EXCEEDED";
    } else if (error.message?.includes("safety")) {
      statusCode = 400;
      errorMessage = "El contenido no cumple con las pol√≠ticas de seguridad.";
      errorCode = "SAFETY_FILTER";
    } else if (error.message?.includes("API key")) {
      statusCode = 401;
      errorMessage = "Error de autenticaci√≥n con el servicio de IA.";
      errorCode = "AUTH_ERROR";
    }

    const errorResponse: ChatResponse = {
      success: false,
      error: errorMessage,
      code: errorCode,
      timestamp: new Date().toISOString(),
    };

    res.status(statusCode).json(errorResponse);
  }

  public getLoveCalculatorInfo = async (
    req: Request,
    res: Response
  ): Promise<void> => {
    try {
      res.json({
        success: true,
        loveExpert: {
          name: "Maestra Valentina",
          title: "Guardiana del Amor Eterno",
          specialty: "Compatibilidad numerol√≥gica y an√°lisis de relaciones",
          description: "Experta en numerolog√≠a del amor especializada en analizar la compatibilidad entre parejas",
          services: [
            "An√°lisis de Compatibilidad Numerol√≥gica",
            "C√°lculo de N√∫meros del Amor",
            "Evaluaci√≥n de Qu√≠mica de Pareja",
            "Consejos para Fortalecer Relaciones",
          ],
        },
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      this.handleError(error, res);
    }
  };
}