/**
 * MONEI API v1
 * The MONEI API is organized around REST principles. Our API is designed to be intuitive and developer-friendly.  ### Base URL  All API requests should be made to:  ``` https://api.monei.com/v1 ```  ### Environment  MONEI provides two environments:  - **Test Environment**: For development and testing without processing real payments - **Live Environment**: For processing real transactions in production  ### Client Libraries  We provide official SDKs to simplify integration:  - [PHP SDK](https://github.com/MONEI/monei-php-sdk) - [Python SDK](https://github.com/MONEI/monei-python-sdk) - [Node.js SDK](https://github.com/MONEI/monei-node-sdk) - [Postman Collection](https://postman.monei.com/)  Our SDKs handle authentication, error handling, and request formatting automatically.  You can download the OpenAPI specification from the https://js.monei.com/api/v1/openapi.json and generate your own client library using the [OpenAPI Generator](https://openapi-generator.tech/).  ### Important Requirements  - All API requests must be made over HTTPS - If you are not using our official SDKs, you **must provide a valid `User-Agent` header** with each request - Requests without proper authentication will return a `401 Unauthorized` error  ### Error Handling  The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a `statusCode` attribute indicating the outcome of your request.  ### Rate Limits  The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a `429 Too Many Requests` status code.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from '../axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { BizumValidatePhone200Response } from '../model';
import type { ValidateBizumPhoneRequest } from '../model';
/**
 * BizumApi - axios parameter creator
 * @export
 */
export declare const BizumApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Validates if a phone number is registered with Bizum.  Use this endpoint to check if a customer\'s phone number can be used for Bizum payments before attempting to process a payment. This helps provide a better user experience by preventing failed payment attempts for non-registered numbers.  The response will indicate whether the phone number is valid for Bizum payments.
     * @summary Validate Phone
     * @param {ValidateBizumPhoneRequest} validateBizumPhoneRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validatePhone: (validateBizumPhoneRequest: ValidateBizumPhoneRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BizumApi - functional programming interface
 * @export
 */
export declare const BizumApiFp: (configuration?: Configuration) => {
    /**
     * Validates if a phone number is registered with Bizum.  Use this endpoint to check if a customer\'s phone number can be used for Bizum payments before attempting to process a payment. This helps provide a better user experience by preventing failed payment attempts for non-registered numbers.  The response will indicate whether the phone number is valid for Bizum payments.
     * @summary Validate Phone
     * @param {ValidateBizumPhoneRequest} validateBizumPhoneRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validatePhone(validateBizumPhoneRequest: ValidateBizumPhoneRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BizumValidatePhone200Response>>;
};
/**
 * BizumApi - factory interface
 * @export
 */
export declare const BizumApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Validates if a phone number is registered with Bizum.  Use this endpoint to check if a customer\'s phone number can be used for Bizum payments before attempting to process a payment. This helps provide a better user experience by preventing failed payment attempts for non-registered numbers.  The response will indicate whether the phone number is valid for Bizum payments.
     * @summary Validate Phone
     * @param {ValidateBizumPhoneRequest} validateBizumPhoneRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validatePhone(validateBizumPhoneRequest: ValidateBizumPhoneRequest, options?: RawAxiosRequestConfig): AxiosPromise<BizumValidatePhone200Response>;
};
/**
 * BizumApi - object-oriented interface
 * @export
 * @class BizumApi
 * @extends {BaseAPI}
 */
export declare class BizumApi extends BaseAPI {
    /**
     * Validates if a phone number is registered with Bizum.  Use this endpoint to check if a customer\'s phone number can be used for Bizum payments before attempting to process a payment. This helps provide a better user experience by preventing failed payment attempts for non-registered numbers.  The response will indicate whether the phone number is valid for Bizum payments.
     * @summary Validate Phone
     * @param {ValidateBizumPhoneRequest} validateBizumPhoneRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BizumApi
     */
    validatePhone(validateBizumPhoneRequest: ValidateBizumPhoneRequest, options?: RawAxiosRequestConfig): Promise<BizumValidatePhone200Response>;
}
