import {
  AfterViewChecked,
  AfterViewInit,
  Component,
  ElementRef,
  Inject,
  OnDestroy,
  OnInit,
  Optional,
  ViewChild,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
} from '@angular/core';
import {
  MAT_DIALOG_DATA,
  MatDialogModule,
  MatDialogRef,
} from '@angular/material/dialog';
import { NumerologiaService } from '../../services/numerologia.service';
import { CommonModule } from '@angular/common';
import { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import {
  loadStripe,
  Stripe,
  StripeElements,
  StripePaymentElement,
} from '@stripe/stripe-js';
import { HttpClient } from '@angular/common/http';
import { RecolectaDatosComponent } from '../recolecta-datos/recolecta-datos.component';
import { environment } from '../../environments/environmets.prod';
import {
  FortuneWheelComponent,
  Prize,
} from '../fortune-wheel/fortune-wheel.component';
interface NumerologyMessage {
  sender: string;
  content: string;
  timestamp: Date;
  isUser: boolean;
  id?: string;
}
interface ConversationMessage {
  role: 'user' | 'numerologist';
  message: string;
  timestamp: Date;
  id?: string;
}

@Component({
  selector: 'app-historia-sagrada',
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    MatDialogModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatIconModule,
    MatProgressSpinnerModule,
    RecolectaDatosComponent,
    FortuneWheelComponent,
  ],
  templateUrl: './lectura-numerologia.component.html',
  styleUrl: './lectura-numerologia.component.css',
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class LecturaNumerologiaComponent
  implements OnInit, OnDestroy, AfterViewChecked, AfterViewInit
{
  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;

  // Variables principales del chat
  messages: ConversationMessage[] = [];
  currentMessage: string = '';
  messageInput = new FormControl('');
  isLoading: boolean = false;
  isTyping: boolean = false;
  hasStartedConversation: boolean = false;
  showDataForm: boolean = false;

  private shouldAutoScroll = true;
  private lastMessageCount = 0;
  //Datos para enviar
  showDataModal: boolean = false;
  userData: any = null;

  // Variables para control de pagos
  showPaymentModal: boolean = false;
  stripe: Stripe | null = null;
  elements: StripeElements | undefined;
  paymentElement: StripePaymentElement | undefined;
  clientSecret: string | null = null;
  isProcessingPayment: boolean = false;
  paymentError: string | null = null;
  hasUserPaidForNumerology: boolean = false;
  firstQuestionAsked: boolean = false;
  //Modal de rueda de la fortuna
  showFortuneWheel: boolean = false;
  numerologyPrizes: Prize[] = [
    {
      id: '1',
      name: '3 tiradas de la ruleta numerol√≥gica',
      color: '#4ecdc4',
      icon: 'üî¢',
    },
    {
      id: '2',
      name: '1 An√°lisis Num√©rico Premium',
      color: '#45b7d1',
      icon: '‚ú®',
    },
    {
      id: '4',
      name: '¬°Int√©ntalo de nuevo!',
      color: '#ff7675',
      icon: 'üîÑ',
    },
  ];
  private wheelTimer: any;
  // NUEVA PROPIEDAD para controlar mensajes bloqueados
  blockedMessageId: string | null = null;
  /*     'pk_live_51S419E5hUE7XrP4NUOjIhnHqmvG3gmEHxwXArkodb2aGD7aBMcBUjBR8QNOgdrRyidxckj2BCVnYMu9ZpkyJuwSS00ru89AmQL';*/
  // Configuraci√≥n de Stripe
  private stripePublishableKey =
    'pk_live_51S419E5hUE7XrP4NUOjIhnHqmvG3gmEHxwXArkodb2aGD7aBMcBUjBR8QNOgdrRyidxckj2BCVnYMu9ZpkyJuwSS00ru89AmQL';
  private backendUrl = environment.apiUrl;

  // Datos personales
  fullName: string = '';
  birthDate: string = '';

  // N√∫meros calculados
  personalNumbers = {
    lifePath: 0,
    destiny: 0,
  };

  // Info del numer√≥logo
  numerologistInfo = {
    name: 'Maestra Sof√≠a',
    title: 'Guardiana de los N√∫meros Sagrados',
    specialty: 'Numerolog√≠a y vibraci√≥n num√©rica universal',
  };

  // Frases de bienvenida aleatorias
  welcomeMessages = [
    'Salve, buscador de la sabidur√≠a num√©rica... Los n√∫meros son el lenguaje del universo y revelan los secretos de tu destino. ¬øQu√© deseas conocer sobre tu vibraci√≥n numerol√≥gica?',
    'Las energ√≠as num√©ricas me susurran que has venido buscando respuestas... Soy Maestra Sof√≠a, guardiana de los n√∫meros sagrados. ¬øQu√© misterio num√©rico te inquieta?',
    'Bienvenido al templo de los n√∫meros sagrados. Los patrones matem√°ticos del cosmos han anunciado tu llegada. Perm√≠teme revelarte los secretos de tu c√≥digo numerol√≥gico.',
    'Los n√∫meros danzan ante m√≠ revelando tu presencia... Cada n√∫mero tiene un significado, cada c√°lculo revela un destino. ¬øQu√© n√∫meros deseas que interprete para ti?',
  ];

  constructor(
    @Optional() public dialogRef: MatDialogRef<LecturaNumerologiaComponent>,
    @Optional() @Inject(MAT_DIALOG_DATA) public data: any,
    private numerologyService: NumerologiaService,
    private http: HttpClient,
    private elRef: ElementRef<HTMLElement>,
    private cdr: ChangeDetectorRef
  ) {}
  ngAfterViewInit(): void {
    this.setVideosSpeed(0.67); // 0.5 = m√°s lento, 1 = normal
  }
  private setVideosSpeed(rate: number): void {
    const host = this.elRef.nativeElement;
    const videos = host.querySelectorAll<HTMLVideoElement>('video');
    videos.forEach((v) => {
      const apply = () => (v.playbackRate = rate);
      if (v.readyState >= 1) apply();
      else v.addEventListener('loadedmetadata', apply, { once: true });
    });
  }
  async ngOnInit(): Promise<void> {
    try {
      this.stripe = await loadStripe(this.stripePublishableKey);
    } catch (error) {
      console.error('Error loading Stripe.js:', error);
      this.paymentError =
        'No se pudo cargar el sistema de pago. Por favor, recarga la p√°gina.';
    }

    this.hasUserPaidForNumerology =
      sessionStorage.getItem('hasUserPaidForNumerology') === 'true';

    // ‚úÖ MEJORADO: Cargar datos del usuario desde sessionStorage
    console.log(
      'üîç Cargando datos del usuario desde sessionStorage para numerolog√≠a...'
    );

    // ‚úÖ MOSTRAR TODO EL CONTENIDO DE sessionStorage
    console.log('üîç Contenido completo de sessionStorage:');
    for (let i = 0; i < sessionStorage.length; i++) {
      const key = sessionStorage.key(i);
      if (key) {
        const value = sessionStorage.getItem(key);
        console.log(`  - ${key}:`, value);
      }
    }

    const savedUserData = sessionStorage.getItem('userData');
    console.log('üîç Datos espec√≠ficos de userData:', savedUserData);

    if (savedUserData) {
      try {
        this.userData = JSON.parse(savedUserData);
        console.log(
          '‚úÖ Datos del usuario restaurados para numerolog√≠a:',
          this.userData
        );

        // ‚úÖ VALIDAR QUE LOS CAMPOS NECESARIOS EST√âN PRESENTES
        const requiredFields = ['nombre', 'email', 'telefono']; // ‚ùå QUITADO 'apellido'
        const availableFields = requiredFields.filter(
          (field) => this.userData[field]
        );
        const missingFields = requiredFields.filter(
          (field) => !this.userData[field]
        );

        console.log('‚úÖ Campos disponibles:', availableFields);
        if (missingFields.length > 0) {
          console.log('‚ö†Ô∏è Campos faltantes:', missingFields);
        }
      } catch (error) {
        console.error('‚ùå Error al parsear datos del usuario:', error);
        this.userData = null;
      }
    } else {
      console.log(
        '‚ÑπÔ∏è No hay datos del usuario guardados en sessionStorage para numerolog√≠a'
      );
      this.userData = null;
    }

    const savedMessages = sessionStorage.getItem('numerologyMessages');
    const savedFirstQuestion = sessionStorage.getItem(
      'numerologyFirstQuestionAsked'
    );
    const savedBlockedMessageId = sessionStorage.getItem(
      'numerologyBlockedMessageId'
    );

    if (savedMessages) {
      try {
        const parsedMessages = JSON.parse(savedMessages);
        this.messages = parsedMessages.map((msg: any) => ({
          ...msg,
          timestamp: new Date(msg.timestamp),
        }));
        this.firstQuestionAsked = savedFirstQuestion === 'true';
        this.blockedMessageId = savedBlockedMessageId || null;
        this.hasStartedConversation = true;
        console.log(
          '‚úÖ Mensajes de numerolog√≠a restaurados desde sessionStorage'
        );
      } catch (error) {
        console.error('Error al restaurar mensajes:', error);
        this.clearSessionData();
        this.startConversation();
      }
    } else {
      this.startConversation();
    }

    // Verificar URL para pagos exitosos
    this.checkPaymentStatus();

    // Probar conexi√≥n
    this.numerologyService.testConnection().subscribe({
      next: (response) => {
        console.log('‚úÖ Conexi√≥n con numerolog√≠a exitosa:', response);
      },
      error: (error) => {
        console.error('‚ùå Error de conexi√≥n con numerolog√≠a:', error);
      },
    });

    if (this.hasStartedConversation && FortuneWheelComponent.canShowWheel()) {
      this.showWheelAfterDelay(2000);
    }
  }

  onWheelClosed(): void {
    console.log('üé∞ Cerrando ruleta numerol√≥gica');
    this.showFortuneWheel = false;
  }
  triggerFortuneWheel(): void {
    console.log('üé∞ Intentando activar ruleta numerol√≥gica manualmente...');

    if (this.showPaymentModal || this.showDataModal) {
      console.log('‚ùå No se puede mostrar - hay otros modales abiertos');
      return;
    }

    if (FortuneWheelComponent.canShowWheel()) {
      console.log('‚úÖ Activando ruleta numerol√≥gica manualmente');
      this.showFortuneWheel = true;
      this.cdr.markForCheck();
    } else {
      console.log(
        '‚ùå No se puede activar ruleta numerol√≥gica - sin tiradas disponibles'
      );
      alert(
        'No tienes tiradas disponibles. ' +
          FortuneWheelComponent.getSpinStatus()
      );
    }
  }
  getSpinStatus(): string {
    return FortuneWheelComponent.getSpinStatus();
  }
  private processNumerologyPrize(prize: Prize): void {
    switch (prize.id) {
      case '1': // 3 Lecturas Gratis
        this.addFreeNumerologyConsultations(3);
        break;
      case '2': // 1 An√°lisis Premium - ACCESO COMPLETO
        console.log('‚ú® Premio Premium ganado - Acceso ilimitado concedido');
        this.hasUserPaidForNumerology = true;
        sessionStorage.setItem('hasUserPaidForNumerology', 'true');

        // Desbloquear cualquier mensaje bloqueado
        if (this.blockedMessageId) {
          this.blockedMessageId = null;
          sessionStorage.removeItem('numerologyBlockedMessageId');
          console.log(
            'üîì Mensaje desbloqueado con acceso premium numerol√≥gico'
          );
        }

        // Agregar mensaje especial para este premio
        const premiumMessage: ConversationMessage = {
          role: 'numerologist',
          message:
            '‚ú® **¬°Has desbloqueado el acceso Premium completo!** ‚ú®\n\nLos n√∫meros sagrados han conspirado a tu favor de manera extraordinaria. Ahora tienes acceso ilimitado a toda la sabidur√≠a numerol√≥gica. Puedes consultar sobre tu camino de vida, n√∫meros del destino, compatibilidades num√©ricas y todos los misterios de la numerolog√≠a cuantas veces desees.\n\nüî¢ *El universo num√©rico ha revelado todos sus secretos para ti* üî¢',
          timestamp: new Date(),
        };
        this.messages.push(premiumMessage);
        this.shouldAutoScroll = true;
        this.saveMessagesToSession();
        break;
      // ‚úÖ ELIMINADO: case '3' - 2 Consultas Extra
      case '4': // Otra oportunidad
        console.log('üîÑ Otra oportunidad numerol√≥gica concedida');
        break;
      default:
        console.warn('‚ö†Ô∏è Premio numerol√≥gico desconocido:', prize);
    }
  }
  private addFreeNumerologyConsultations(count: number): void {
    const current = parseInt(
      sessionStorage.getItem('freeNumerologyConsultations') || '0'
    );
    const newTotal = current + count;
    sessionStorage.setItem('freeNumerologyConsultations', newTotal.toString());
    console.log(
      `üéÅ Agregadas ${count} consultas numerol√≥gicas. Total: ${newTotal}`
    );

    // Si hab√≠a un mensaje bloqueado, desbloquearlo
    if (this.blockedMessageId && !this.hasUserPaidForNumerology) {
      this.blockedMessageId = null;
      sessionStorage.removeItem('numerologyBlockedMessageId');
      console.log('üîì Mensaje numerol√≥gico desbloqueado con consulta gratuita');
    }
  }

  private hasFreeNumerologyConsultationsAvailable(): boolean {
    const freeConsultations = parseInt(
      sessionStorage.getItem('freeNumerologyConsultations') || '0'
    );
    return freeConsultations > 0;
  }

  private useFreeNumerologyConsultation(): void {
    const freeConsultations = parseInt(
      sessionStorage.getItem('freeNumerologyConsultations') || '0'
    );

    if (freeConsultations > 0) {
      const remaining = freeConsultations - 1;
      sessionStorage.setItem(
        'freeNumerologyConsultations',
        remaining.toString()
      );
      console.log(
        `üéÅ Consulta numerol√≥gica gratis usada. Restantes: ${remaining}`
      );

      // Mostrar mensaje informativo
      const prizeMsg: ConversationMessage = {
        role: 'numerologist',
        message: `‚ú® *Has usado una consulta numerol√≥gica gratis* ‚ú®\n\nTe quedan **${remaining}** consultas numerol√≥gicas gratis disponibles.`,
        timestamp: new Date(),
      };
      this.messages.push(prizeMsg);
      this.shouldAutoScroll = true;
      this.saveMessagesToSession();
    }
  }
  private checkPaymentStatus(): void {
    const urlParams = new URLSearchParams(window.location.search);
    const paymentIntent = urlParams.get('payment_intent');
    const paymentIntentClientSecret = urlParams.get(
      'payment_intent_client_secret'
    );

    if (paymentIntent && paymentIntentClientSecret && this.stripe) {
      console.log('üîç Verificando estado del pago de numerolog√≠a...');

      this.stripe
        .retrievePaymentIntent(paymentIntentClientSecret)
        .then(({ paymentIntent }) => {
          if (paymentIntent) {
            switch (paymentIntent.status) {
              case 'succeeded':
                console.log('‚úÖ Pago de numerolog√≠a confirmado desde URL');
                this.hasUserPaidForNumerology = true;
                sessionStorage.setItem('hasUserPaidForNumerology', 'true');
                this.blockedMessageId = null;
                sessionStorage.removeItem('numerologyBlockedMessageId');

                window.history.replaceState(
                  {},
                  document.title,
                  window.location.pathname
                );

                const lastMessage = this.messages[this.messages.length - 1];
                if (
                  !lastMessage ||
                  !lastMessage.message.includes('¬°Pago confirmado!')
                ) {
                  const confirmationMsg: ConversationMessage = {
                    role: 'numerologist',
                    message:
                      '‚ú® ¬°Pago confirmado! Ahora puedes acceder a todas las interpretaciones numerol√≥gicas que desees. Los n√∫meros sagrados est√°n a tu disposici√≥n. ¬øQu√© otro aspecto numerol√≥gico te gustar√≠a explorar?',
                    timestamp: new Date(),
                  };
                  this.messages.push(confirmationMsg);
                  this.saveMessagesToSession();
                }
                break;

              case 'processing':
                console.log('‚è≥ Pago en procesamiento');
                break;

              case 'requires_payment_method':
                console.log('‚ùå Pago fall√≥');
                this.clearSessionData();
                break;
            }
          }
        })
        .catch((error: any) => {
          console.error('Error verificando el pago:', error);
        });
    }
  }

  ngAfterViewChecked(): void {
    if (this.shouldAutoScroll && this.messages.length > this.lastMessageCount) {
      this.scrollToBottom();
      this.lastMessageCount = this.messages.length;
    }
  }

  onScroll(event: any): void {
    const element = event.target;
    const threshold = 50;
    const isNearBottom =
      element.scrollHeight - element.scrollTop - element.clientHeight <
      threshold;
    this.shouldAutoScroll = isNearBottom;
  }

  ngOnDestroy(): void {
    if (this.paymentElement) {
      try {
        this.paymentElement.destroy();
      } catch (error) {
        console.log('Error al destruir elemento de pago:', error);
      } finally {
        this.paymentElement = undefined;
      }
    }
    if (this.wheelTimer) {
      clearTimeout(this.wheelTimer);
    }
  }

  autoResize(event: any): void {
    const textarea = event.target;
    textarea.style.height = 'auto';
    textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
  }
  startConversation(): void {
    if (this.messages.length === 0) {
      const randomWelcome =
        this.welcomeMessages[
          Math.floor(Math.random() * this.welcomeMessages.length)
        ];

      const welcomeMessage: ConversationMessage = {
        role: 'numerologist',
        message: randomWelcome,
        timestamp: new Date(),
      };

      this.messages.push(welcomeMessage);
    }
    this.hasStartedConversation = true;

    if (FortuneWheelComponent.canShowWheel()) {
      this.showWheelAfterDelay(3000);
    } else {
      console.log(
        'üö´ No se puede mostrar ruleta numerol√≥gica - sin tiradas disponibles'
      );
    }
  }

  sendMessage(): void {
    if (!this.currentMessage.trim() || this.isLoading) return;

    const userMessage = this.currentMessage.trim();

    // ‚úÖ NUEVA L√ìGICA: Verificar consultas numerol√≥gicas gratuitas ANTES de verificar pago
    if (!this.hasUserPaidForNumerology && this.firstQuestionAsked) {
      // Verificar si tiene consultas numerol√≥gicas gratis disponibles
      if (this.hasFreeNumerologyConsultationsAvailable()) {
        console.log('üéÅ Usando consulta numerol√≥gica gratis del premio');
        this.useFreeNumerologyConsultation();
        // Continuar con el mensaje sin bloquear
      } else {
        // Si no tiene consultas gratis, mostrar modal de datos
        console.log(
          'üí≥ No hay consultas numerol√≥gicas gratis - mostrando modal de datos'
        );

        // Cerrar otros modales primero
        this.showFortuneWheel = false;
        this.showPaymentModal = false;

        // Guardar el mensaje para procesarlo despu√©s del pago
        sessionStorage.setItem('pendingNumerologyMessage', userMessage);

        this.saveStateBeforePayment();

        // Mostrar modal de datos con timeout
        setTimeout(() => {
          this.showDataModal = true;
          console.log('üìù showDataModal establecido a:', this.showDataModal);
        }, 100);

        return; // Salir aqu√≠ para no procesar el mensaje a√∫n
      }
    }

    this.shouldAutoScroll = true;

    // Agregar mensaje del usuario
    const userMsg: ConversationMessage = {
      role: 'user',
      message: userMessage,
      timestamp: new Date(),
    };
    this.messages.push(userMsg);

    this.saveMessagesToSession();
    this.currentMessage = '';
    this.isTyping = true;
    this.isLoading = true;

    // Preparar historial de conversaci√≥n
    const conversationHistory = this.messages.slice(-10).map((msg) => ({
      role: msg.role === 'user' ? ('user' as const) : ('numerologist' as const),
      message: msg.message,
    }));

    // Enviar al servicio
    this.numerologyService
      .sendMessage(
        userMessage,
        this.birthDate || undefined,
        this.fullName || undefined,
        conversationHistory
      )
      .subscribe({
        next: (response) => {
          this.isLoading = false;
          this.isTyping = false;

          if (response) {
            const messageId = Date.now().toString();

            const numerologistMsg: ConversationMessage = {
              role: 'numerologist',
              message: response,
              timestamp: new Date(),
              id: messageId,
            };
            this.messages.push(numerologistMsg);

            this.shouldAutoScroll = true;

            // ‚úÖ L√ìGICA MODIFICADA: Solo bloquear si no tiene consultas gratis Y no ha pagado
            if (
              this.firstQuestionAsked &&
              !this.hasUserPaidForNumerology &&
              !this.hasFreeNumerologyConsultationsAvailable()
            ) {
              this.blockedMessageId = messageId;
              sessionStorage.setItem('numerologyBlockedMessageId', messageId);

              setTimeout(() => {
                console.log(
                  'üîí Mensaje numerol√≥gico bloqueado - mostrando modal de datos'
                );
                this.saveStateBeforePayment();

                // Cerrar otros modales
                this.showFortuneWheel = false;
                this.showPaymentModal = false;

                // Mostrar modal de datos
                setTimeout(() => {
                  this.showDataModal = true;
                  this.cdr.markForCheck();
                }, 100);
              }, 2000);
            } else if (!this.firstQuestionAsked) {
              this.firstQuestionAsked = true;
              sessionStorage.setItem('numerologyFirstQuestionAsked', 'true');
            }

            this.saveMessagesToSession();
            this.cdr.markForCheck();
          } else {
            this.handleError('Error al obtener respuesta del numer√≥logo');
          }
        },
        error: (error: any) => {
          this.isLoading = false;
          this.isTyping = false;
          console.error('Error:', error);
          this.handleError('Error de conexi√≥n. Por favor, int√©ntalo de nuevo.');
          this.cdr.markForCheck();
        },
      });
  }
  private saveStateBeforePayment(): void {
    console.log('üíæ Guardando estado de numerolog√≠a antes del pago...');
    this.saveMessagesToSession();
    sessionStorage.setItem(
      'numerologyFirstQuestionAsked',
      this.firstQuestionAsked.toString()
    );
    if (this.blockedMessageId) {
      sessionStorage.setItem(
        'numerologyBlockedMessageId',
        this.blockedMessageId
      );
    }
  }

  private saveMessagesToSession(): void {
    try {
      const messagesToSave = this.messages.map((msg) => ({
        ...msg,
        timestamp:
          msg.timestamp instanceof Date
            ? msg.timestamp.toISOString()
            : msg.timestamp,
      }));
      sessionStorage.setItem(
        'numerologyMessages',
        JSON.stringify(messagesToSave)
      );
    } catch (error) {
      console.error('Error guardando mensajes:', error);
    }
  }

  private clearSessionData(): void {
    sessionStorage.removeItem('hasUserPaidForNumerology');
    sessionStorage.removeItem('numerologyMessages');
    sessionStorage.removeItem('numerologyFirstQuestionAsked');
    sessionStorage.removeItem('numerologyBlockedMessageId');
    // ‚úÖ NO ELIMINAR userData para mantener los datos entre sesiones
    // sessionStorage.removeItem('userData'); // Comentado para mantener los datos
  }

  isMessageBlocked(message: ConversationMessage): boolean {
    return (
      message.id === this.blockedMessageId && !this.hasUserPaidForNumerology
    );
  }

  async promptForPayment(): Promise<void> {
    console.log('üí≥ EJECUTANDO promptForPayment() para numerolog√≠a');

    this.showPaymentModal = true;
    this.paymentError = null;
    this.isProcessingPayment = true;

    if (this.paymentElement) {
      try {
        this.paymentElement.destroy();
      } catch (error) {
        console.log('Error destruyendo elemento anterior:', error);
      }
      this.paymentElement = undefined;
    }

    try {
      const items = [{ id: 'numerology_reading_unlimited', amount: 400 }];

      // ‚úÖ CARGAR DATOS DESDE sessionStorage SI NO EST√ÅN EN MEMORIA
      if (!this.userData) {
        console.log(
          'üîç userData no est√° en memoria, cargando desde sessionStorage para numerolog√≠a...'
        );
        const savedUserData = sessionStorage.getItem('userData');
        if (savedUserData) {
          try {
            this.userData = JSON.parse(savedUserData);
            console.log(
              '‚úÖ Datos cargados desde sessionStorage para numerolog√≠a:',
              this.userData
            );
          } catch (error) {
            console.error('‚ùå Error al parsear datos guardados:', error);
            this.userData = null;
          }
        }
      }

      // ‚úÖ VALIDAR DATOS ANTES DE CREAR customerInfo
      console.log(
        'üîç Validando userData completo para numerolog√≠a:',
        this.userData
      );

      if (!this.userData) {
        console.error(
          '‚ùå No hay userData disponible ni en memoria ni en sessionStorage para numerolog√≠a'
        );
        this.paymentError =
          'No se encontraron los datos del cliente. Por favor, completa el formulario primero.';
        this.isProcessingPayment = false;
        this.showDataModal = true;
        return;
      }

      // ‚úÖ VALIDAR CAMPOS INDIVIDUALES CON CONVERSI√ìN A STRING
      const nombre = this.userData.nombre?.toString().trim();
      // const apellido = this.userData.apellido?.toString().trim(); // ‚ùå ELIMINADO
      const email = this.userData.email?.toString().trim();
      const telefono = this.userData.telefono?.toString().trim();

      console.log('üîç Validando campos individuales para numerolog√≠a:');
      console.log('  - nombre:', `"${nombre}"`, nombre ? '‚úÖ' : '‚ùå');
      console.log('  - email:', `"${email}"`, email ? '‚úÖ' : '‚ùå');
      console.log('  - telefono:', `"${telefono}"`, telefono ? '‚úÖ' : '‚ùå');

      if (!nombre || !email || !telefono) {
        console.error(
          '‚ùå Faltan campos requeridos para el pago de numerolog√≠a'
        );
        const faltantes = [];
        if (!nombre) faltantes.push('nombre');
        if (!email) faltantes.push('email');
        if (!telefono) faltantes.push('tel√©fono');

        this.paymentError = `Faltan datos del cliente: ${faltantes.join(
          ', '
        )}. Por favor, completa el formulario primero.`;
        this.isProcessingPayment = false;
        this.showDataModal = true;
        return;
      }

      // ‚úÖ CREAR customerInfo SOLO SI TODOS LOS CAMPOS EST√ÅN PRESENTES
      const customerInfo = {
        name: nombre,
        email: email,
        phone: telefono,
      };

      console.log(
        'üì§ Enviando request de payment intent para numerolog√≠a con datos del cliente...'
      );
      console.log('üë§ Datos del cliente enviados:', customerInfo);

      // ‚úÖ CAMBIAR: Enviar tanto items como customerInfo
      const requestBody = { items, customerInfo };

      const response = await this.http
        .post<{ clientSecret: string }>(
          `${this.backendUrl}create-payment-intent`,
          requestBody
        )
        .toPromise();

      console.log('üì• Respuesta de payment intent:', response);

      if (!response || !response.clientSecret) {
        throw new Error(
          'Error al obtener la informaci√≥n de pago del servidor.'
        );
      }
      this.clientSecret = response.clientSecret;

      if (this.stripe && this.clientSecret) {
        this.elements = this.stripe.elements({
          clientSecret: this.clientSecret,
          appearance: { theme: 'stripe' },
        });
        this.paymentElement = this.elements.create('payment');

        this.isProcessingPayment = false;

        setTimeout(() => {
          const paymentElementContainer = document.getElementById(
            'payment-element-container'
          );
          console.log('üéØ Contenedor encontrado:', paymentElementContainer);

          if (paymentElementContainer && this.paymentElement) {
            console.log('‚úÖ Montando payment element...');
            this.paymentElement.mount(paymentElementContainer);
          } else {
            console.error('‚ùå Contenedor del elemento de pago no encontrado.');
            this.paymentError = 'No se pudo mostrar el formulario de pago.';
          }
        }, 100);
      } else {
        throw new Error(
          'Stripe.js o la clave secreta del cliente no est√°n disponibles.'
        );
      }
    } catch (error: any) {
      console.error('‚ùå Error al preparar el pago de numerolog√≠a:', error);
      console.error('‚ùå Detalles del error:', error.error || error);
      this.paymentError =
        error.message ||
        'Error al inicializar el pago. Por favor, int√©ntalo de nuevo.';
      this.isProcessingPayment = false;
    }
  }

  async handlePaymentSubmit(): Promise<void> {
    if (
      !this.stripe ||
      !this.elements ||
      !this.clientSecret ||
      !this.paymentElement
    ) {
      this.paymentError =
        'El sistema de pago no est√° inicializado correctamente.';
      this.isProcessingPayment = false;
      return;
    }

    this.isProcessingPayment = true;
    this.paymentError = null;

    const { error, paymentIntent } = await this.stripe.confirmPayment({
      elements: this.elements,
      confirmParams: {
        return_url: window.location.origin + window.location.pathname,
      },
      redirect: 'if_required',
    });

    if (error) {
      this.paymentError =
        error.message || 'Ocurri√≥ un error inesperado durante el pago.';
      this.isProcessingPayment = false;
    } else if (paymentIntent) {
      switch (paymentIntent.status) {
        case 'succeeded':
          console.log('¬°Pago exitoso para numerolog√≠a!');
          this.hasUserPaidForNumerology = true;
          sessionStorage.setItem('hasUserPaidForNumerology', 'true');
          this.showPaymentModal = false;
          this.paymentElement?.destroy();

          this.blockedMessageId = null;
          sessionStorage.removeItem('numerologyBlockedMessageId');

          const confirmationMsg: ConversationMessage = {
            role: 'numerologist',
            message:
              '‚ú® ¬°Pago confirmado! Ahora puedes acceder a todas las interpretaciones numerol√≥gicas que desees. Los n√∫meros sagrados revelar√°n todos sus secretos. ¬øQu√© otro aspecto numerol√≥gico te gustar√≠a explorar?',
            timestamp: new Date(),
          };
          this.messages.push(confirmationMsg);

          // ‚úÖ NUEVO: Procesar mensaje pendiente si existe
          const pendingMessage = sessionStorage.getItem(
            'pendingNumerologyMessage'
          );
          if (pendingMessage) {
            console.log(
              'üìù Procesando mensaje numerol√≥gico pendiente:',
              pendingMessage
            );
            sessionStorage.removeItem('pendingNumerologyMessage');

            // Procesar el mensaje pendiente despu√©s de un peque√±o delay
            setTimeout(() => {
              this.currentMessage = pendingMessage;
              this.sendMessage();
            }, 1000);
          }

          this.shouldAutoScroll = true;
          this.saveMessagesToSession();
          break;
        case 'processing':
          this.paymentError =
            'El pago se est√° procesando. Te notificaremos cuando se complete.';
          break;
        case 'requires_payment_method':
          this.paymentError =
            'Pago fallido. Por favor, intenta con otro m√©todo de pago.';
          this.isProcessingPayment = false;
          break;
        case 'requires_action':
          this.paymentError =
            'Se requiere una acci√≥n adicional para completar el pago.';
          this.isProcessingPayment = false;
          break;
        default:
          this.paymentError = `Estado del pago: ${paymentIntent.status}. Int√©ntalo de nuevo.`;
          this.isProcessingPayment = false;
          break;
      }
    } else {
      this.paymentError = 'No se pudo determinar el estado del pago.';
      this.isProcessingPayment = false;
    }
  }

  cancelPayment(): void {
    this.showPaymentModal = false;
    this.clientSecret = null;

    if (this.paymentElement) {
      try {
        this.paymentElement.destroy();
      } catch (error) {
        console.log('Error al destruir elemento de pago:', error);
      } finally {
        this.paymentElement = undefined;
      }
    }

    this.isProcessingPayment = false;
    this.paymentError = null;
  }

  savePersonalData(): void {
    if (this.fullName) {
      this.personalNumbers.destiny =
        this.numerologyService.calculateDestinyNumber(this.fullName);
    }

    if (this.birthDate) {
      this.personalNumbers.lifePath = this.numerologyService.calculateLifePath(
        this.birthDate
      );
    }

    this.showDataForm = false;

    if (this.personalNumbers.lifePath || this.personalNumbers.destiny) {
      let numbersMessage = 'He calculado tus n√∫meros sagrados:\n\n';

      if (this.personalNumbers.lifePath) {
        numbersMessage += `üîπ Camino de Vida: ${
          this.personalNumbers.lifePath
        } - ${this.numerologyService.getNumberMeaning(
          this.personalNumbers.lifePath
        )}\n\n`;
      }

      if (this.personalNumbers.destiny) {
        numbersMessage += `üîπ N√∫mero del Destino: ${
          this.personalNumbers.destiny
        } - ${this.numerologyService.getNumberMeaning(
          this.personalNumbers.destiny
        )}\n\n`;
      }

      numbersMessage +=
        '¬øTe gustar√≠a que profundice en la interpretaci√≥n de alguno de estos n√∫meros?';

      const numbersMsg: ConversationMessage = {
        role: 'numerologist',
        message: numbersMessage,
        timestamp: new Date(),
      };
      this.messages.push(numbersMsg);
      this.saveMessagesToSession();
    }
  }

  toggleDataForm(): void {
    this.showDataForm = !this.showDataForm;
  }

  newConsultation(): void {
    this.shouldAutoScroll = true;
    this.lastMessageCount = 0;

    if (!this.hasUserPaidForNumerology) {
      this.firstQuestionAsked = false;
      this.blockedMessageId = null;
      this.clearSessionData();
    } else {
      sessionStorage.removeItem('numerologyMessages');
      sessionStorage.removeItem('numerologyFirstQuestionAsked');
      sessionStorage.removeItem('numerologyBlockedMessageId');
      this.firstQuestionAsked = false;
      this.blockedMessageId = null;
    }

    this.messages = [];
    this.hasStartedConversation = false;
    this.startConversation();
    this.cdr.markForCheck();
  }

  private handleError(errorMessage: string): void {
    const errorMsg: ConversationMessage = {
      role: 'numerologist',
      message: `üî¢ Los n√∫meros c√≥smicos est√°n en fluctuaci√≥n... ${errorMessage} Intenta nuevamente cuando las vibraciones num√©ricas se estabilicen.`,
      timestamp: new Date(),
    };
    this.messages.push(errorMsg);
    this.shouldAutoScroll = true;
  }

  private scrollToBottom(): void {
    try {
      if (this.scrollContainer) {
        const element = this.scrollContainer.nativeElement;
        element.scrollTop = element.scrollHeight;
      }
    } catch (err) {
      console.error('Error scrolling to bottom:', err);
    }
  }

  clearConversation(): void {
    this.newConsultation();
  }

  onKeyPress(event: KeyboardEvent): void {
    if (event.key === 'Enter' && !event.shiftKey) {
      event.preventDefault();
      this.sendMessage();
    }
  }

  getTimeString(timestamp: Date | string): string {
    try {
      const date = timestamp instanceof Date ? timestamp : new Date(timestamp);
      if (isNaN(date.getTime())) {
        return 'N/A';
      }
      return date.toLocaleTimeString('es-ES', {
        hour: '2-digit',
        minute: '2-digit',
      });
    } catch (error) {
      console.error('Error formateando timestamp:', error);
      return 'N/A';
    }
  }

  formatMessage(content: string): string {
    if (!content) return '';

    let formattedContent = content;

    // Convertir **texto** a <strong>texto</strong> para negrilla
    formattedContent = formattedContent.replace(
      /\*\*(.*?)\*\*/g,
      '<strong>$1</strong>'
    );

    // Convertir saltos de l√≠nea a <br> para mejor visualizaci√≥n
    formattedContent = formattedContent.replace(/\n/g, '<br>');

    // Opcional: Tambi√©n puedes manejar *texto* (una sola asterisco) como cursiva
    formattedContent = formattedContent.replace(
      /(?<!\*)\*([^*\n]+)\*(?!\*)/g,
      '<em>$1</em>'
    );

    return formattedContent;
  }

  closeModal(): void {
    if (this.dialogRef) {
      this.dialogRef.close();
    }
  }
  onUserDataSubmitted(userData: any): void {
    console.log('üì• Datos del usuario recibidos en numerolog√≠a:', userData);
    console.log('üìã Campos disponibles:', Object.keys(userData));

    // ‚úÖ VALIDAR CAMPOS CR√çTICOS ANTES DE PROCEDER
    const requiredFields = ['nombre', 'email', 'telefono']; // ‚ùå QUITADO 'apellido'
    const missingFields = requiredFields.filter(
      (field) => !userData[field] || userData[field].toString().trim() === ''
    );

    if (missingFields.length > 0) {
      console.error(
        '‚ùå Faltan campos obligatorios para numerolog√≠a:',
        missingFields
      );
      alert(
        `Para proceder con el pago, necesitas completar: ${missingFields.join(
          ', '
        )}`
      );
      this.showDataModal = true; // Mantener modal abierto
      return;
    }

    // ‚úÖ LIMPIAR Y GUARDAR datos INMEDIATAMENTE en memoria Y sessionStorage
    this.userData = {
      ...userData,
      nombre: userData.nombre?.toString().trim(),
      // apellido: userData.apellido?.toString().trim(), // ‚ùå ELIMINADO
      email: userData.email?.toString().trim(),
      telefono: userData.telefono?.toString().trim(),
    };

    // ‚úÖ GUARDAR EN sessionStorage INMEDIATAMENTE
    try {
      sessionStorage.setItem('userData', JSON.stringify(this.userData));
      console.log(
        '‚úÖ Datos guardados en sessionStorage para numerolog√≠a:',
        this.userData
      );

      // Verificar que se guardaron correctamente
      const verificacion = sessionStorage.getItem('userData');
      console.log(
        'üîç Verificaci√≥n - Datos en sessionStorage para numerolog√≠a:',
        verificacion ? JSON.parse(verificacion) : 'No encontrados'
      );
    } catch (error) {
      console.error('‚ùå Error guardando en sessionStorage:', error);
    }

    this.showDataModal = false;

    // ‚úÖ NUEVO: Enviar datos al backend como en el componente de sue√±os
    this.sendUserDataToBackend(userData);
  }

  // ‚úÖ NUEVO: Agregar m√©todo para enviar al backend (como en el componente de sue√±os)
  private sendUserDataToBackend(userData: any): void {
    console.log('üì§ Enviando datos al backend desde numerolog√≠a...');

    this.http.post(`${this.backendUrl}api/recolecta`, userData).subscribe({
      next: (response) => {
        console.log(
          '‚úÖ Datos enviados correctamente al backend desde numerolog√≠a:',
          response
        );

        // ‚úÖ PROCEDER AL PAGO DESPU√âS DE UN PEQUE√ëO DELAY
        setTimeout(() => {
          this.promptForPayment();
        }, 500);
      },
      error: (error) => {
        console.error(
          '‚ùå Error enviando datos al backend desde numerolog√≠a:',
          error
        );

        // ‚úÖ AUN AS√ç PROCEDER AL PAGO (el backend puede fallar pero el pago debe continuar)
        console.log('‚ö†Ô∏è Continuando con el pago a pesar del error del backend');
        setTimeout(() => {
          this.promptForPayment();
        }, 500);
      },
    });
  }

  onDataModalClosed(): void {
    this.showDataModal = false;
  }
  onPrizeWon(prize: Prize): void {
    console.log('üéâ Premio numerol√≥gico ganado:', prize);

    const prizeMessage: ConversationMessage = {
      role: 'numerologist',
      message: `üî¢ ¬°Los n√∫meros sagrados te han bendecido! Has ganado: **${prize.name}** ${prize.icon}\n\nLas vibraciones num√©ricas del universo han decidido favorecerte con este regalo c√≥smico. La energ√≠a de los n√∫meros antiguos fluye a trav√©s de ti, revelando secretos m√°s profundos de tu destino numerol√≥gico. ¬°Que la sabidur√≠a de los n√∫meros te gu√≠e!`,
      timestamp: new Date(),
    };

    this.messages.push(prizeMessage);
    this.shouldAutoScroll = true;
    this.saveMessagesToSession();

    this.processNumerologyPrize(prize);
  }

  showWheelAfterDelay(delayMs: number = 3000): void {
    if (this.wheelTimer) {
      clearTimeout(this.wheelTimer);
    }

    this.wheelTimer = setTimeout(() => {
      if (
        FortuneWheelComponent.canShowWheel() &&
        !this.showPaymentModal &&
        !this.showDataModal
      ) {
        this.showFortuneWheel = true;
        this.cdr.markForCheck();
      }
    }, delayMs);
  }
}
