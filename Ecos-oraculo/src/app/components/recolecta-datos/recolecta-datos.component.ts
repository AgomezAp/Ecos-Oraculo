import { CommonModule } from '@angular/common';
import { Component, EventEmitter, Output } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { RecolectaService } from '../../services/recolecta.service';
import { Datos } from '../../interfaces/datos';

@Component({
  selector: 'app-recolecta-datos',
  imports: [CommonModule, FormsModule],
  templateUrl: './recolecta-datos.component.html',
  styleUrl: './recolecta-datos.component.css',
})
export class RecolectaDatosComponent {
  // ‚úÖ Eventos de salida
  @Output() onDataSubmitted = new EventEmitter<any>();
  @Output() onModalClosed = new EventEmitter<void>();
  constructor(private recolecta: RecolectaService) {}
  // ‚úÖ Propiedades de datos
  userData: any = {
    NIF: '',
    numero_pasapote: '',
    pais: '',
    nombre: '',
    apellido: '',
    direccion: '',
    calle: '',
    codigo_postal: '',
    ciudad: '',
    provincia: '',
    comunidad_autonoma: '',
    importe: 4.0,
    email: '',
    telefono: '',
  };
  aceptaTerminos = false;
  showTerminosError = false;
  datosVeridicos = false;
  showDatosVeridicosError = false;
  emailNotifications = false;
  // ‚úÖ Control de formulario
  dataFormErrors: { [key: string]: string } = {};
  isValidatingData: boolean = false;
  attemptedDataSubmission: boolean = false;

  // ‚úÖ Listas de opciones
  countries = [
    'Espa√±a',
    'M√©xico',
    'Argentina',
    'Colombia',
    'Chile',
    'Per√∫',
    'Venezuela',
    'Ecuador',
    'Bolivia',
    'Paraguay',
    'Uruguay',
    'Costa Rica',
    'Panam√°',
    'Nicaragua',
    'Honduras',
    'El Salvador',
    'Guatemala',
    'Rep√∫blica Dominicana',
    'Cuba',
    'Puerto Rico',
    'Estados Unidos',
    'Canad√°',
    'Brasil',
    'Francia',
    'Italia',
    'Alemania',
    'Reino Unido',
    'Portugal',
    'Otros',
  ];

  comunidadesAutonomas = [
    'Andaluc√≠a',
    'Arag√≥n',
    'Asturias',
    'Baleares',
    'Canarias',
    'Cantabria',
    'Castilla-La Mancha',
    'Castilla y Le√≥n',
    'Catalu√±a',
    'Comunidad Valenciana',
    'Extremadura',
    'Galicia',
    'Madrid',
    'Murcia',
    'Navarra',
    'Pa√≠s Vasco',
    'La Rioja',
  ];

  // ‚úÖ M√©todo para validar datos
  validateUserData(): boolean {
    this.dataFormErrors = {};
    let isValid = true;

    console.log('üîç Validando userData:', this.userData); // DEBUG

    // Validar email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!this.userData.email || !this.userData.email.toString().trim()) {
      this.dataFormErrors['email'] = 'El email es obligatorio';
      isValid = false;
    } else if (!emailRegex.test(this.userData.email.toString().trim())) {
      this.dataFormErrors['email'] = 'Ingresa un email v√°lido';
      isValid = false;
    }

    // Validar nombre
    if (!this.userData.nombre || !this.userData.nombre.toString().trim()) {
      this.dataFormErrors['nombre'] = 'El nombre es obligatorio';
      isValid = false;
    } else if (this.userData.nombre.toString().trim().length < 2) {
      this.dataFormErrors['nombre'] =
        'El nombre debe tener al menos 2 caracteres';
      isValid = false;
    }

    // Validar apellido
    if (!this.userData.apellido || !this.userData.apellido.toString().trim()) {
      this.dataFormErrors['apellido'] = 'El apellido es obligatorio';
      isValid = false;
    } else if (this.userData.apellido.toString().trim().length < 2) {
      this.dataFormErrors['apellido'] =
        'El apellido debe tener al menos 2 caracteres';
      isValid = false;
    }

    // ‚ùå COMENTADO - Validar pa√≠s
    // if (!this.userData.pais || !this.userData.pais.toString().trim()) {
    //   this.dataFormErrors['pais'] = 'Selecciona tu pa√≠s';
    //   isValid = false;
    // }

    // ‚úÖ Validar tel√©fono
    if (!this.userData.telefono || !this.userData.telefono.toString().trim()) {
      this.dataFormErrors['telefono'] = 'El tel√©fono es obligatorio';
      console.log('‚ùå Tel√©fono vac√≠o o no existe');
      isValid = false;
    } else if (this.userData.telefono.toString().trim().length < 9) {
      this.dataFormErrors['telefono'] =
        'El tel√©fono debe tener al menos 9 d√≠gitos';
      console.log(
        '‚ùå Tel√©fono muy corto:',
        this.userData.telefono.toString().trim().length
      );
      isValid = false;
    } else {
      console.log(
        '‚úÖ Tel√©fono v√°lido:',
        this.userData.telefono.toString().trim()
      );
    }

    // ‚ùå COMENTADO - Validar direcci√≥n
    // if (!this.userData.direccion || !this.userData.direccion.toString().trim()) {
    //   this.dataFormErrors['direccion'] = 'La direcci√≥n es obligatoria';
    //   isValid = false;
    // }

    // ‚ùå COMENTADO - Validar c√≥digo postal
    // if (!this.userData.codigo_postal || !this.userData.codigo_postal.toString().trim()) {
    //   this.dataFormErrors['codigo_postal'] = 'El c√≥digo postal es obligatorio';
    //   isValid = false;
    // }

    // ‚ùå COMENTADO - Validar ciudad
    // if (!this.userData.ciudad || !this.userData.ciudad.toString().trim()) {
    //   this.dataFormErrors['ciudad'] = 'La ciudad es obligatoria';
    //   isValid = false;
    // }

    // ‚ùå COMENTADO - Validar NIF o Pasaporte
    // const nif = this.userData.NIF ? this.userData.NIF.toString().trim() : '';
    // const pasaporte = this.userData.numero_pasapote ? this.userData.numero_pasapote.toString().trim() : '';
    //
    // if (!nif && !pasaporte) {
    //   this.dataFormErrors['NIF'] = 'Debes proporcionar NIF o n√∫mero de pasaporte';
    //   this.dataFormErrors['numero_pasapote'] = 'Debes proporcionar NIF o n√∫mero de pasaporte';
    //   isValid = false;
    // }

    console.log('üîç Resultado de validaci√≥n:', {
      isValid,
      errores: this.dataFormErrors,
    });

    return isValid;
  }

  // ‚úÖ M√©todo para verificar errores
  hasError(field: string): boolean {
    return this.attemptedDataSubmission && !!this.dataFormErrors[field];
  }

  async submitUserData(): Promise<void> {
    console.log('üîç Iniciando submitUserData...'); // DEBUG
    console.log('üîç Estado actual de userData:', this.userData); // DEBUG EXTRA

    this.attemptedDataSubmission = true;

    // Validar formulario
    if (!this.validateUserData()) {
      console.log('‚ùå Validaci√≥n fallida:', this.dataFormErrors); // DEBUG
      return;
    }

    // Validar t√©rminos y condiciones
    this.showTerminosError = false;
    this.showDatosVeridicosError = false;

    if (!this.aceptaTerminos) {
      this.showTerminosError = true;
      console.log('‚ùå T√©rminos no aceptados'); // DEBUG
      return;
    }

    if (!this.datosVeridicos) {
      this.showDatosVeridicosError = true;
      console.log('‚ùå Datos ver√≠dicos no confirmados'); // DEBUG
      return;
    }

    this.isValidatingData = true;
    console.log('‚úÖ Todas las validaciones pasaron, enviando datos...'); // DEBUG

    try {
      // ‚úÖ LIMPIAR Y NORMALIZAR DATOS ANTES DE ENVIAR
      const datosToSend: Datos = {
        NIF: '', // ‚ùå Campo comentado - enviar vac√≠o
        numero_pasapote: '', // ‚ùå Campo comentado - enviar vac√≠o
        pais: '', // ‚ùå Campo comentado - enviar vac√≠o
        nombre: (this.userData.nombre || '').toString().trim(),
        apellido: (this.userData.apellido || '').toString().trim(),
        direccion: '', // ‚ùå Campo comentado - enviar vac√≠o
        calle: '', // ‚ùå Campo comentado - enviar vac√≠o
        codigo_postal: '', // ‚ùå Campo comentado - enviar vac√≠o
        ciudad: '', // ‚ùå Campo comentado - enviar vac√≠o
        provincia: '', // ‚ùå Campo comentado - enviar vac√≠o
        comunidad_autonoma: '', // ‚ùå Campo comentado - enviar vac√≠o
        importe: this.userData.importe || 5.0,
        email: (this.userData.email || '').toString().trim(),
        telefono: (this.userData.telefono || '').toString().trim(),
      };
      /*    const datosToSend: Datos = {
        NIF: (this.userData.NIF || '').toString().trim(),
        numero_pasapote: (this.userData.numero_pasapote || '')
          .toString()
          .trim(),
        pais: (this.userData.pais || '').toString().trim(),
        nombre: (this.userData.nombre || '').toString().trim(),
        apellido: (this.userData.apellido || '').toString().trim(),
        direccion: (this.userData.direccion || '').toString().trim(),
        calle: (this.userData.calle || '').toString().trim(),
        codigo_postal: (this.userData.codigo_postal || '').toString().trim(),
        ciudad: (this.userData.ciudad || '').toString().trim(),
        provincia: (this.userData.provincia || '').toString().trim(),
        comunidad_autonoma: (this.userData.comunidad_autonoma || '')
          .toString()
          .trim(),
        importe: this.userData.importe || 5.0,
        email: (this.userData.email || '').toString().trim(),
        telefono: (this.userData.telefono || '').toString().trim(), // ‚úÖ ASEGURAR que telefono sea string
      }; */

      console.log('üì§ Datos a enviar (limpios):', datosToSend); // DEBUG
      console.log('üìû Tel√©fono espec√≠fico:', {
        original: this.userData.telefono,
        limpio: datosToSend.telefono,
        longitud: datosToSend.telefono.length,
      }); // DEBUG TEL√âFONO

      // ‚úÖ VALIDAR UNA VEZ M√ÅS LOS CAMPOS CR√çTICOS
      const camposCriticos = ['nombre', 'apellido', 'email', 'telefono'];
      const faltantes = camposCriticos.filter(
        (campo) => !datosToSend[campo as keyof Datos]
      );

      if (faltantes.length > 0) {
        console.error(
          '‚ùå Faltan campos cr√≠ticos despu√©s de la limpieza:',
          faltantes
        );
        this.dataFormErrors[
          'general'
        ] = `Faltan campos obligatorios: ${faltantes.join(', ')}`;
        this.isValidatingData = false;
        return;
      }

      // Guardar en sessionStorage
      sessionStorage.setItem('userData', JSON.stringify(datosToSend));
      console.log('üíæ Datos guardados en sessionStorage');

      // Verificar que se guardaron correctamente
      const verificacion = sessionStorage.getItem('userData');
      const datosGuardados = verificacion ? JSON.parse(verificacion) : null;
      console.log('üîç Verificaci√≥n sessionStorage:', datosGuardados);
      console.log('üìû Tel√©fono en sessionStorage:', datosGuardados?.telefono);

      // Llamar al servicio
      this.recolecta.createProduct(datosToSend).subscribe({
        next: (response: Datos) => {
          console.log('‚úÖ Respuesta del backend:', response); // DEBUG
          this.isValidatingData = false;
          this.onDataSubmitted.emit(datosToSend); // ‚úÖ EMITIR datosToSend en lugar de response
        },
        error: (error: any) => {
          console.error('‚ùå Error del backend:', error); // DEBUG
          console.error('‚ùå Error completo:', {
            message: error.message,
            status: error.status,
            statusText: error.statusText,
            url: error.url,
            error: error.error,
          });

          // ‚úÖ AUN AS√ç EMITIR LOS DATOS PARA CONTINUAR CON EL PAGO
          console.log(
            '‚ö†Ô∏è Error del backend, pero continuando con los datos locales'
          );
          this.isValidatingData = false;
          this.onDataSubmitted.emit(datosToSend); // ‚úÖ EMITIR datos locales
        },
      });
    } catch (error) {
      console.error('‚ùå Error inesperado:', error); // DEBUG
      this.dataFormErrors['general'] =
        'Error inesperado. Por favor, int√©ntalo de nuevo.';
      this.isValidatingData = false;
    }
  }
  cancelDataModal(): void {
    this.onModalClosed.emit();
  }
}
