import { Injectable } from '@angular/core';
import { catchError, map, Observable, throwError } from 'rxjs';
import { environment } from '../environments/environments';
import { HttpClient, HttpHeaders } from '@angular/common/http';

interface VocationalData {
  name: string;
  specialty: string;
  experience: string;
}

interface VocationalRequest {
  vocationalData: VocationalData;
  userMessage: string;
  personalInfo?: {
    age?: number;
    currentEducation?: string;
    workExperience?: string;
    interests?: string[];
  };
  assessmentAnswers?: Array<{
    question: string;
    answer: string;
    category: string;
  }>;
  conversationHistory?: Array<{
    role: 'user' | 'counselor';
    message: string;
  }>;
}

interface VocationalResponse {
  success: boolean;
  response?: string;
  error?: string;
  code?: string;
  timestamp?: string;
}

interface AssessmentQuestion {
  id: number;
  question: string;
  options: Array<{
    value: string;
    label: string;
    category: string;
  }>;
}

interface AssessmentQuestionsResponse {
  success: boolean;
  questions: AssessmentQuestion[];
  instructions: string;
  timestamp: string;
}

interface CategoryAnalysis {
  category: string;
  count: number;
  percentage: number;
}

interface VocationalProfile {
  name: string;
  description: string;
  characteristics: string[];
  workEnvironments: string[];
}

interface AnalysisResult {
  profileDistribution: CategoryAnalysis[];
  dominantProfile: VocationalProfile;
  recommendations: string[];
}

interface AnalysisResponse {
  success: boolean;
  analysis: AnalysisResult;
  timestamp: string;
}

interface CounselorInfo {
  name: string;
  title: string;
  specialty: string;
  description: string;
  services: string[];
  methodology: string[];
}

interface CounselorInfoResponse {
  success: boolean;
  counselor: CounselorInfo;
  timestamp: string;
}

@Injectable({
  providedIn: 'root'
})
export class MapaVocacionalService {
  // ‚úÖ CORREGIR: Usar solo la URL base
  private readonly API_URL = environment.apiUrl;

  private readonly httpOptions = {
    headers: new HttpHeaders({
      'Content-Type': 'application/json',
    }),
  };

  constructor(private http: HttpClient) {}

  /**
   * Env√≠a un mensaje al consejero vocacional
   */
  sendMessage(
    userMessage: string,
    personalInfo?: any,
    assessmentAnswers?: any[],
    conversationHistory?: Array<{role: 'user' | 'counselor', message: string}>
  ): Observable<string> {
    const counselorData: VocationalData = {
      name: "Dr. Mentor Vocationis",
      specialty: "Orientaci√≥n profesional y mapas vocacionales personalizados",
      experience: "D√©cadas de experiencia en psicolog√≠a vocacional"
    };

    const requestBody: VocationalRequest = {
      vocationalData: counselorData,
      userMessage,
      personalInfo,
      assessmentAnswers,
      conversationHistory
    };

    // ‚úÖ CORREGIR: URL exacta seg√∫n backend
    return this.http.post<VocationalResponse>(
      `${this.API_URL}api/vocational/counselor`,
      requestBody,
      this.httpOptions
    ).pipe(
      map((response:any) => {
        if (response.success && response.response) {
          return response.response;
        } else {
          throw new Error(response.error || 'Error desconocido del consejero vocacional');
        }
      }),
      catchError(this.handleError)
    );
  }

  /**
   * Obtiene informaci√≥n del consejero vocacional
   */
  getCounselorInfo(): Observable<CounselorInfo> {
    // ‚úÖ CORREGIR: URL exacta seg√∫n backend
    return this.http.get<CounselorInfoResponse>(
      `${this.API_URL}/api/vocational/counselor/info`,
      this.httpOptions
    ).pipe(
      map((response:any) => {
        if (response.success && response.counselor) {
          return response.counselor;
        } else {
          throw new Error('Error al obtener informaci√≥n del consejero');
        }
      }),
      catchError(this.handleError)
    );
  }

  /**
   * Obtiene las preguntas del assessment vocacional
   */
  getAssessmentQuestions(): Observable<AssessmentQuestion[]> {
    // ‚úÖ CORREGIR: URL exacta seg√∫n backend
    return this.http.get<AssessmentQuestionsResponse>(
      `${this.API_URL}api/vocational/assessment/questions`,
      this.httpOptions
    ).pipe(
      map((response:any) => {
        if (response.success && response.questions) {
          return response.questions;
        } else {
          throw new Error('Error al obtener preguntas del assessment');
        }
      }),
      catchError(this.handleError)
    );
  }

  /**
   * Analiza las respuestas del assessment vocacional
   */
  analyzeAssessment(answers: Array<{question: string, answer: string, category: string}>): Observable<AnalysisResult> {
    const requestBody = { answers };

    // ‚úÖ CORREGIR: URL exacta seg√∫n backend
    return this.http.post<AnalysisResponse>(
      `${this.API_URL}api/vocational/assessment/analyze`,
      requestBody,
      this.httpOptions
    ).pipe(
      map((response:any) => {
        if (response.success && response.analysis) {
          return response.analysis;
        } else {
          throw new Error('Error al analizar el assessment');
        }
      }),
      catchError(this.handleError)
    );
  }

  /**
   * Prueba la conexi√≥n con el servicio vocacional
   */
  testConnection(): Observable<any> {
    // ‚úÖ CORREGIR: URL exacta seg√∫n backend
    return this.http.get(`${this.API_URL}api/vocational/test`).pipe(
      catchError(this.handleError)
    );
  }

  /**
   * Obtiene recomendaciones de carrera basadas en una categor√≠a
   */
  getCareerRecommendations(category: string): string[] {
    const recommendations: Record<string, string[]> = {
      social: [
        "Psicolog√≠a y Terapia",
        "Educaci√≥n y Docencia",
        "Trabajo Social",
        "Recursos Humanos",
        "Enfermer√≠a y Salud",
        "Orientaci√≥n Vocacional"
      ],
      investigativo: [
        "Ingenier√≠a en sus diversas ramas",
        "Medicina e Investigaci√≥n M√©dica",
        "Ciencias de la Computaci√≥n",
        "Investigaci√≥n Cient√≠fica",
        "An√°lisis de Datos",
        "Arquitectura"
      ],
      art√≠stico: [
        "Dise√±o Gr√°fico y Web",
        "Arquitectura y Dise√±o de Interiores",
        "Comunicaci√≥n Social y Periodismo",
        "Artes Visuales y Esc√©nicas",
        "Marketing Creativo",
        "Producci√≥n Audiovisual"
      ],
      emprendedor: [
        "Administraci√≥n de Empresas",
        "Marketing y Ventas",
        "Finanzas y Banca",
        "Derecho Empresarial",
        "Comercio Internacional",
        "Consultor√≠a"
      ],
      convencional: [
        "Contabilidad y Auditor√≠a",
        "Administraci√≥n P√∫blica",
        "Gesti√≥n de Operaciones",
        "Sistemas de Informaci√≥n",
        "Log√≠stica y Cadena de Suministro",
        "Finanzas"
      ],
      realista: [
        "Ingenier√≠a Mec√°nica y Civil",
        "Arquitectura",
        "Agricultura y Veterinaria",
        "Tecnolog√≠a Industrial",
        "Oficios Especializados",
        "Ciencias Ambientales"
      ]
    };

    return recommendations[category] || recommendations['social'];
  }

  /**
   * Obtiene la descripci√≥n de un perfil vocacional
   */
  getProfileDescription(category: string): VocationalProfile {
    const profiles: Record<string, VocationalProfile> = {
      social: {
        name: "Perfil Social",
        description: "Te motiva ayudar, ense√±ar y trabajar con personas",
        characteristics: ["Emp√°tico", "Comunicativo", "Colaborativo", "Orientado al servicio"],
        workEnvironments: ["Educaci√≥n", "Salud", "Servicios sociales", "Recursos humanos"]
      },
      investigativo: {
        name: "Perfil Investigativo",
        description: "Te atrae resolver problemas, investigar y analizar",
        characteristics: ["Anal√≠tico", "Curioso", "Met√≥dico", "Orientado a datos"],
        workEnvironments: ["Ciencia", "Tecnolog√≠a", "Investigaci√≥n", "Ingenier√≠a"]
      },
      art√≠stico: {
        name: "Perfil Art√≠stico",
        description: "Te motiva crear, dise√±ar y expresarte creativamente",
        characteristics: ["Creativo", "Original", "Expresivo", "Innovador"],
        workEnvironments: ["Artes", "Dise√±o", "Medios", "Entretenimiento"]
      },
      emprendedor: {
        name: "Perfil Emprendedor",
        description: "Te atrae liderar, persuadir y dirigir proyectos",
        characteristics: ["L√≠der", "Ambicioso", "Persuasivo", "Orientado a resultados"],
        workEnvironments: ["Negocios", "Ventas", "Gerencia", "Emprendimiento"]
      },
      convencional: {
        name: "Perfil Convencional",
        description: "Te motiva organizar, administrar y trabajar con datos",
        characteristics: ["Organizado", "Detallista", "Eficiente", "Confiable"],
        workEnvironments: ["Administraci√≥n", "Finanzas", "Contabilidad", "Operaciones"]
      },
      realista: {
        name: "Perfil Realista",
        description: "Te atrae trabajar con herramientas, m√°quinas y objetos",
        characteristics: ["Pr√°ctico", "T√©cnico", "Independiente", "Orientado a resultados"],
        workEnvironments: ["Ingenier√≠a", "Construcci√≥n", "Agricultura", "Oficios especializados"]
      }
    };

    return profiles[category] || profiles['social'];
  }

  /**
   * Obtiene el emoji asociado a cada categor√≠a vocacional
   */
  getCategoryEmoji(category: string): string {
    const emojis: Record<string, string> = {
      social: "üë•",
      investigativo: "üî¨",
      art√≠stico: "üé®",
      emprendedor: "üíº",
      convencional: "üìä",
      realista: "üîß"
    };

    return emojis[category] || "üéØ";
  }

  /**
   * Obtiene el color asociado a cada categor√≠a vocacional
   */
  getCategoryColor(category: string): string {
    const colors: Record<string, string> = {
      social: "#4CAF50",      // Verde
      investigativo: "#2196F3", // Azul
      art√≠stico: "#E91E63",    // Rosa
      emprendedor: "#FF9800",  // Naranja
      convencional: "#9C27B0", // P√∫rpura
      realista: "#795548"      // Marr√≥n
    };

    return colors[category] || "#607D8B";
  }

  /**
   * Valida las respuestas del assessment
   */
  validateAssessmentAnswers(answers: any[]): boolean {
    if (!answers || !Array.isArray(answers)) {
      return false;
    }

    if (answers.length === 0) {
      return false;
    }

    return answers.every(answer => 
      answer.question && 
      answer.answer && 
      answer.category
    );
  }

  /**
   * Calcula el porcentaje de completitud del assessment
   */
  calculateAssessmentProgress(answeredQuestions: number, totalQuestions: number): number {
    if (totalQuestions === 0) return 0;
    return Math.round((answeredQuestions / totalQuestions) * 100);
  }

  /**
   * Genera recomendaciones de desarrollo personal
   */
  getPersonalDevelopmentRecommendations(dominantProfile: string): string[] {
    const recommendations: Record<string, string[]> = {
      social: [
        "Desarrolla habilidades de comunicaci√≥n interpersonal",
        "Practica la escucha activa y emp√°tica",
        "Participa en actividades de voluntariado",
        "Toma cursos de psicolog√≠a o trabajo social"
      ],
      investigativo: [
        "Fortalece habilidades anal√≠ticas y de investigaci√≥n",
        "Aprende nuevas metodolog√≠as cient√≠ficas",
        "Participa en proyectos de investigaci√≥n",
        "Desarrolla competencias en an√°lisis de datos"
      ],
      art√≠stico: [
        "Explora diferentes formas de expresi√≥n creativa",
        "Practica t√©cnicas art√≠sticas diversas",
        "Participa en comunidades creativas",
        "Desarrolla tu portfolio art√≠stico"
      ],
      emprendedor: [
        "Desarrolla habilidades de liderazgo",
        "Aprende sobre gesti√≥n de negocios",
        "Practica la toma de decisiones",
        "Fortalece tu red de contactos profesionales"
      ],
      convencional: [
        "Mejora habilidades organizacionales",
        "Aprende herramientas de gesti√≥n",
        "Desarrolla atenci√≥n al detalle",
        "Fortalece competencias administrativas"
      ],
      realista: [
        "Desarrolla habilidades t√©cnicas especializadas",
        "Practica con herramientas y tecnolog√≠as",
        "Participa en proyectos pr√°cticos",
        "Aprende oficios especializados"
      ]
    };

    return recommendations[dominantProfile] || recommendations['social'];
  }

  /**
   * Manejo de errores HTTP
   */
  private handleError = (error: any): Observable<never> => {
    let errorMessage = 'Error desconocido';
    
    if (error.error instanceof ErrorEvent) {
      // Error del lado del cliente
      errorMessage = `Error: ${error.error.message}`;
    } else {
      // Error del servidor
      errorMessage = error.error?.error || error.message || `Error HTTP: ${error.status}`;
    }
    
    console.error('Error en MapaVocacionalService:', errorMessage);
    return throwError(() => new Error(errorMessage));
  };
}